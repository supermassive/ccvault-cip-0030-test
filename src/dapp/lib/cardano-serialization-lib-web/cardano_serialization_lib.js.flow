/**
 * Flowtype definitions for cardano_serialization_lib
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 * @flow
 */

/**
 * @param {Uint8Array} bytes
 * @returns {TransactionMetadatum}
 */
declare export function encode_arbitrary_bytes_as_metadatum(
  bytes: Uint8Array,
): TransactionMetadatum;

/**
 * @param {TransactionMetadatum} metadata
 * @returns {Uint8Array}
 */
declare export function decode_arbitrary_bytes_from_metadatum(
  metadata: TransactionMetadatum,
): Uint8Array;

/**
 * @param {string} json
 * @param {number} schema
 * @returns {TransactionMetadatum}
 */
declare export function encode_json_str_to_metadatum(
  json: string,
  schema: number,
): TransactionMetadatum;

/**
 * @param {TransactionMetadatum} metadatum
 * @param {number} schema
 * @returns {string}
 */
declare export function decode_metadatum_to_json_str(
  metadatum: TransactionMetadatum,
  schema: number,
): string;

/**
 * @param {TransactionHash} tx_body_hash
 * @param {ByronAddress} addr
 * @param {LegacyDaedalusPrivateKey} key
 * @returns {BootstrapWitness}
 */
declare export function make_daedalus_bootstrap_witness(
  tx_body_hash: TransactionHash,
  addr: ByronAddress,
  key: LegacyDaedalusPrivateKey,
): BootstrapWitness;

/**
 * @param {TransactionHash} tx_body_hash
 * @param {ByronAddress} addr
 * @param {Bip32PrivateKey} key
 * @returns {BootstrapWitness}
 */
declare export function make_icarus_bootstrap_witness(
  tx_body_hash: TransactionHash,
  addr: ByronAddress,
  key: Bip32PrivateKey,
): BootstrapWitness;

/**
 * @param {TransactionHash} tx_body_hash
 * @param {PrivateKey} sk
 * @returns {Vkeywitness}
 */
declare export function make_vkey_witness(
  tx_body_hash: TransactionHash,
  sk: PrivateKey,
): Vkeywitness;

/**
 * @param {AuxiliaryData} auxiliary_data
 * @returns {AuxiliaryDataHash}
 */
declare export function hash_auxiliary_data(
  auxiliary_data: AuxiliaryData,
): AuxiliaryDataHash;

/**
 * @param {TransactionBody} tx_body
 * @returns {TransactionHash}
 */
declare export function hash_transaction(
  tx_body: TransactionBody,
): TransactionHash;

/**
 * @param {PlutusData} plutus_data
 * @returns {DataHash}
 */
declare export function hash_plutus_data(plutus_data: PlutusData): DataHash;

/**
 * @param {Redeemers} redeemers
 * @param {Costmdls} cost_models
 * @param {PlutusList | void} datums
 * @returns {ScriptDataHash}
 */
declare export function hash_script_data(
  redeemers: Redeemers,
  cost_models: Costmdls,
  datums?: PlutusList,
): ScriptDataHash;

/**
 * @param {TransactionBody} txbody
 * @param {BigNum} pool_deposit
 * @param {BigNum} key_deposit
 * @returns {Value}
 */
declare export function get_implicit_input(
  txbody: TransactionBody,
  pool_deposit: BigNum,
  key_deposit: BigNum,
): Value;

/**
 * @param {TransactionBody} txbody
 * @param {BigNum} pool_deposit
 * @param {BigNum} key_deposit
 * @returns {BigNum}
 */
declare export function get_deposit(
  txbody: TransactionBody,
  pool_deposit: BigNum,
  key_deposit: BigNum,
): BigNum;

/**
 * @param {Value} assets
 * @param {BigNum} minimum_utxo_val
 * @returns {BigNum}
 */
declare export function min_ada_required(
  assets: Value,
  minimum_utxo_val: BigNum,
): BigNum;

/**
 * Receives a script JSON string
 * and returns a NativeScript.
 * Cardano Wallet and Node styles are supported.
 *
 * * wallet: https://github.com/input-output-hk/cardano-wallet/blob/master/specifications/api/swagger.yaml
 * * node: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md
 *
 * self_xpub is expected to be a Bip32PublicKey as hex-encoded bytes
 * @param {string} json
 * @param {string} self_xpub
 * @param {number} schema
 * @returns {NativeScript}
 */
declare export function encode_json_str_to_native_script(
  json: string,
  self_xpub: string,
  schema: number,
): NativeScript;

/**
 * @param {string} password
 * @param {string} salt
 * @param {string} nonce
 * @param {string} data
 * @returns {string}
 */
declare export function encrypt_with_password(
  password: string,
  salt: string,
  nonce: string,
  data: string,
): string;

/**
 * @param {string} password
 * @param {string} data
 * @returns {string}
 */
declare export function decrypt_with_password(
  password: string,
  data: string,
): string;

/**
 * @param {Transaction} tx
 * @param {LinearFee} linear_fee
 * @returns {BigNum}
 */
declare export function min_fee(tx: Transaction, linear_fee: LinearFee): BigNum;

/**
 */

declare export var CertificateKind: {|
  +StakeRegistration: 0, // 0
  +StakeDeregistration: 1, // 1
  +StakeDelegation: 2, // 2
  +PoolRegistration: 3, // 3
  +PoolRetirement: 4, // 4
  +GenesisKeyDelegation: 5, // 5
  +MoveInstantaneousRewardsCert: 6, // 6
|};

/**
 */

declare export var MIRPot: {|
  +Reserves: 0, // 0
  +Treasury: 1, // 1
|};

/**
 */

declare export var MIRKind: {|
  +ToOtherPot: 0, // 0
  +ToStakeCredentials: 1, // 1
|};

/**
 */

declare export var RelayKind: {|
  +SingleHostAddr: 0, // 0
  +SingleHostName: 1, // 1
  +MultiHostName: 2, // 2
|};

/**
 */

declare export var NativeScriptKind: {|
  +ScriptPubkey: 0, // 0
  +ScriptAll: 1, // 1
  +ScriptAny: 2, // 2
  +ScriptNOfK: 3, // 3
  +TimelockStart: 4, // 4
  +TimelockExpiry: 5, // 5
|};

/**
 * Each new language uses a different namespace for hashing its script
 * This is because you could have a language where the same bytes have different semantics
 * So this avoids scripts in different languages mapping to the same hash
 * Note that the enum value here is different than the enum value for deciding the cost model of a script
 */

declare export var ScriptHashNamespace: {|
  +NativeScript: 0, // 0
|};

/**
 */

declare export var NetworkIdKind: {|
  +Testnet: 0, // 0
  +Mainnet: 1, // 1
|};

/**
 */

declare export var TransactionMetadatumKind: {|
  +MetadataMap: 0, // 0
  +MetadataList: 1, // 1
  +Int: 2, // 2
  +Bytes: 3, // 3
  +Text: 4, // 4
|};

/**
 */

declare export var MetadataJsonSchema: {|
  +NoConversions: 0, // 0
  +BasicConversions: 1, // 1
  +DetailedSchema: 2, // 2
|};

/**
 * Used to choosed the schema for a script JSON string
 */

declare export var ScriptSchema: {|
  +Wallet: 0, // 0
  +Node: 1, // 1
|};

/**
 */

declare export var StakeCredKind: {|
  +Key: 0, // 0
  +Script: 1, // 1
|};

/**
 */

declare export var LanguageKind: {|
  +PlutusV1: 0, // 0
|};

/**
 */

declare export var PlutusDataKind: {|
  +ConstrPlutusData: 0, // 0
  +Map: 1, // 1
  +List: 2, // 2
  +Integer: 3, // 3
  +Bytes: 4, // 4
|};

/**
 */

declare export var RedeemerTagKind: {|
  +Spend: 0, // 0
  +Mint: 1, // 1
  +Cert: 2, // 2
  +Reward: 3, // 3
|};

/**
 */
declare export class Address {
  free(): void;

  /**
   * @param {Uint8Array} data
   * @returns {Address}
   */
  static from_bytes(data: Uint8Array): Address;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string | void} prefix
   * @returns {string}
   */
  to_bech32(prefix?: string): string;

  /**
   * @param {string} bech_str
   * @returns {Address}
   */
  static from_bech32(bech_str: string): Address;

  /**
   * @returns {number}
   */
  network_id(): number;
}
/**
 */
declare export class AssetName {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {AssetName}
   */
  static from_bytes(bytes: Uint8Array): AssetName;

  /**
   * @param {Uint8Array} name
   * @returns {AssetName}
   */
  static new(name: Uint8Array): AssetName;

  /**
   * @returns {Uint8Array}
   */
  name(): Uint8Array;
}
/**
 */
declare export class AssetNames {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {AssetNames}
   */
  static from_bytes(bytes: Uint8Array): AssetNames;

  /**
   * @returns {AssetNames}
   */
  static new(): AssetNames;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {AssetName}
   */
  get(index: number): AssetName;

  /**
   * @param {AssetName} elem
   */
  add(elem: AssetName): void;
}
/**
 */
declare export class Assets {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Assets}
   */
  static from_bytes(bytes: Uint8Array): Assets;

  /**
   * @returns {Assets}
   */
  static new(): Assets;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {AssetName} key
   * @param {BigNum} value
   * @returns {BigNum | void}
   */
  insert(key: AssetName, value: BigNum): BigNum | void;

  /**
   * @param {AssetName} key
   * @returns {BigNum | void}
   */
  get(key: AssetName): BigNum | void;

  /**
   * @returns {AssetNames}
   */
  keys(): AssetNames;
}
/**
 */
declare export class AuxiliaryData {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {AuxiliaryData}
   */
  static from_bytes(bytes: Uint8Array): AuxiliaryData;

  /**
   * @returns {AuxiliaryData}
   */
  static new(): AuxiliaryData;

  /**
   * @returns {GeneralTransactionMetadata | void}
   */
  metadata(): GeneralTransactionMetadata | void;

  /**
   * @param {GeneralTransactionMetadata} metadata
   */
  set_metadata(metadata: GeneralTransactionMetadata): void;

  /**
   * @returns {NativeScripts | void}
   */
  native_scripts(): NativeScripts | void;

  /**
   * @param {NativeScripts} native_scripts
   */
  set_native_scripts(native_scripts: NativeScripts): void;

  /**
   * @returns {PlutusScripts | void}
   */
  plutus_scripts(): PlutusScripts | void;

  /**
   * @param {PlutusScripts} plutus_scripts
   */
  set_plutus_scripts(plutus_scripts: PlutusScripts): void;
}
/**
 */
declare export class AuxiliaryDataHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {AuxiliaryDataHash}
   */
  static from_bech32(bech_str: string): AuxiliaryDataHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {AuxiliaryDataHash}
   */
  static from_bytes(bytes: Uint8Array): AuxiliaryDataHash;
}
/**
 */
declare export class AuxiliaryDataSet {
  free(): void;

  /**
   * @returns {AuxiliaryDataSet}
   */
  static new(): AuxiliaryDataSet;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} tx_index
   * @param {AuxiliaryData} data
   * @returns {AuxiliaryData | void}
   */
  insert(tx_index: number, data: AuxiliaryData): AuxiliaryData | void;

  /**
   * @param {number} tx_index
   * @returns {AuxiliaryData | void}
   */
  get(tx_index: number): AuxiliaryData | void;

  /**
   * @returns {Uint32Array}
   */
  indices(): Uint32Array;
}
/**
 */
declare export class BaseAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @param {StakeCredential} stake
   * @returns {BaseAddress}
   */
  static new(
    network: number,
    payment: StakeCredential,
    stake: StakeCredential,
  ): BaseAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {StakeCredential}
   */
  stake_cred(): StakeCredential;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {BaseAddress | void}
   */
  static from_address(addr: Address): BaseAddress | void;
}
/**
 */
declare export class BigInt {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {BigInt}
   */
  static from_bytes(bytes: Uint8Array): BigInt;

  /**
   * @returns {BigNum | void}
   */
  as_u64(): BigNum | void;

  /**
   * @param {string} text
   * @returns {BigInt}
   */
  static from_str(text: string): BigInt;

  /**
   * @returns {string}
   */
  to_str(): string;
}
/**
 */
declare export class BigNum {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {BigNum}
   */
  static from_bytes(bytes: Uint8Array): BigNum;

  /**
   * @param {string} string
   * @returns {BigNum}
   */
  static from_str(string: string): BigNum;

  /**
   * @returns {string}
   */
  to_str(): string;

  /**
   * @returns {BigNum}
   */
  static zero(): BigNum;

  /**
   * @returns {boolean}
   */
  is_zero(): boolean;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_mul(other: BigNum): BigNum;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_add(other: BigNum): BigNum;

  /**
   * @param {BigNum} other
   * @returns {BigNum}
   */
  checked_sub(other: BigNum): BigNum;

  /**
   * returns 0 if it would otherwise underflow
   * @param {BigNum} other
   * @returns {BigNum}
   */
  clamped_sub(other: BigNum): BigNum;

  /**
   * @param {BigNum} rhs_value
   * @returns {number}
   */
  compare(rhs_value: BigNum): number;
}
/**
 */
declare export class Bip32PrivateKey {
  free(): void;

  /**
   * derive this private key with the given index.
   *
   * # Security considerations
   *
   * * hard derivation index cannot be soft derived with the public key
   *
   * # Hard derivation vs Soft derivation
   *
   * If you pass an index below 0x80000000 then it is a soft derivation.
   * The advantage of soft derivation is that it is possible to derive the
   * public key too. I.e. derivation the private key with a soft derivation
   * index and then retrieving the associated public key is equivalent to
   * deriving the public key associated to the parent private key.
   *
   * Hard derivation index does not allow public key derivation.
   *
   * This is why deriving the private key should not fail while deriving
   * the public key may fail (if the derivation index is invalid).
   * @param {number} index
   * @returns {Bip32PrivateKey}
   */
  derive(index: number): Bip32PrivateKey;

  /**
   * 128-byte xprv a key format in Cardano that some software still uses or requires
   * the traditional 96-byte xprv is simply encoded as
   * prv | chaincode
   * however, because some software may not know how to compute a public key from a private key,
   * the 128-byte inlines the public key in the following format
   * prv | pub | chaincode
   * so be careful if you see the term "xprv" as it could refer to either one
   * our library does not require the pub (instead we compute the pub key when needed)
   * @param {Uint8Array} bytes
   * @returns {Bip32PrivateKey}
   */
  static from_128_xprv(bytes: Uint8Array): Bip32PrivateKey;

  /**
   * see from_128_xprv
   * @returns {Uint8Array}
   */
  to_128_xprv(): Uint8Array;

  /**
   * @returns {Bip32PrivateKey}
   */
  static generate_ed25519_bip32(): Bip32PrivateKey;

  /**
   * @returns {PrivateKey}
   */
  to_raw_key(): PrivateKey;

  /**
   * @returns {Bip32PublicKey}
   */
  to_public(): Bip32PublicKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {Bip32PrivateKey}
   */
  static from_bytes(bytes: Uint8Array): Bip32PrivateKey;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {string} bech32_str
   * @returns {Bip32PrivateKey}
   */
  static from_bech32(bech32_str: string): Bip32PrivateKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @param {Uint8Array} entropy
   * @param {Uint8Array} password
   * @returns {Bip32PrivateKey}
   */
  static from_bip39_entropy(
    entropy: Uint8Array,
    password: Uint8Array,
  ): Bip32PrivateKey;

  /**
   * @returns {Uint8Array}
   */
  chaincode(): Uint8Array;
}
/**
 */
declare export class Bip32PublicKey {
  free(): void;

  /**
   * derive this public key with the given index.
   *
   * # Errors
   *
   * If the index is not a soft derivation index (< 0x80000000) then
   * calling this method will fail.
   *
   * # Security considerations
   *
   * * hard derivation index cannot be soft derived with the public key
   *
   * # Hard derivation vs Soft derivation
   *
   * If you pass an index below 0x80000000 then it is a soft derivation.
   * The advantage of soft derivation is that it is possible to derive the
   * public key too. I.e. derivation the private key with a soft derivation
   * index and then retrieving the associated public key is equivalent to
   * deriving the public key associated to the parent private key.
   *
   * Hard derivation index does not allow public key derivation.
   *
   * This is why deriving the private key should not fail while deriving
   * the public key may fail (if the derivation index is invalid).
   * @param {number} index
   * @returns {Bip32PublicKey}
   */
  derive(index: number): Bip32PublicKey;

  /**
   * @returns {PublicKey}
   */
  to_raw_key(): PublicKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {Bip32PublicKey}
   */
  static from_bytes(bytes: Uint8Array): Bip32PublicKey;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {string} bech32_str
   * @returns {Bip32PublicKey}
   */
  static from_bech32(bech32_str: string): Bip32PublicKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {Uint8Array}
   */
  chaincode(): Uint8Array;
}
/**
 */
declare export class Block {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Block}
   */
  static from_bytes(bytes: Uint8Array): Block;

  /**
   * @returns {Header}
   */
  header(): Header;

  /**
   * @returns {TransactionBodies}
   */
  transaction_bodies(): TransactionBodies;

  /**
   * @returns {TransactionWitnessSets}
   */
  transaction_witness_sets(): TransactionWitnessSets;

  /**
   * @returns {AuxiliaryDataSet}
   */
  auxiliary_data_set(): AuxiliaryDataSet;

  /**
   * @returns {Uint32Array}
   */
  invalid_transactions(): Uint32Array;

  /**
   * @param {Header} header
   * @param {TransactionBodies} transaction_bodies
   * @param {TransactionWitnessSets} transaction_witness_sets
   * @param {AuxiliaryDataSet} auxiliary_data_set
   * @param {Uint32Array} invalid_transactions
   * @returns {Block}
   */
  static new(
    header: Header,
    transaction_bodies: TransactionBodies,
    transaction_witness_sets: TransactionWitnessSets,
    auxiliary_data_set: AuxiliaryDataSet,
    invalid_transactions: Uint32Array,
  ): Block;
}
/**
 */
declare export class BlockHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {BlockHash}
   */
  static from_bech32(bech_str: string): BlockHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {BlockHash}
   */
  static from_bytes(bytes: Uint8Array): BlockHash;
}
/**
 */
declare export class BootstrapWitness {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {BootstrapWitness}
   */
  static from_bytes(bytes: Uint8Array): BootstrapWitness;

  /**
   * @returns {Vkey}
   */
  vkey(): Vkey;

  /**
   * @returns {Ed25519Signature}
   */
  signature(): Ed25519Signature;

  /**
   * @returns {Uint8Array}
   */
  chain_code(): Uint8Array;

  /**
   * @returns {Uint8Array}
   */
  attributes(): Uint8Array;

  /**
   * @param {Vkey} vkey
   * @param {Ed25519Signature} signature
   * @param {Uint8Array} chain_code
   * @param {Uint8Array} attributes
   * @returns {BootstrapWitness}
   */
  static new(
    vkey: Vkey,
    signature: Ed25519Signature,
    chain_code: Uint8Array,
    attributes: Uint8Array,
  ): BootstrapWitness;
}
/**
 */
declare export class BootstrapWitnesses {
  free(): void;

  /**
   * @returns {BootstrapWitnesses}
   */
  static new(): BootstrapWitnesses;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {BootstrapWitness}
   */
  get(index: number): BootstrapWitness;

  /**
   * @param {BootstrapWitness} elem
   */
  add(elem: BootstrapWitness): void;
}
/**
 */
declare export class ByronAddress {
  free(): void;

  /**
   * @returns {string}
   */
  to_base58(): string;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ByronAddress}
   */
  static from_bytes(bytes: Uint8Array): ByronAddress;

  /**
   * returns the byron protocol magic embedded in the address, or mainnet id if none is present
   * note: for bech32 addresses, you need to use network_id instead
   * @returns {number}
   */
  byron_protocol_magic(): number;

  /**
   * @returns {Uint8Array}
   */
  attributes(): Uint8Array;

  /**
   * @returns {number}
   */
  network_id(): number;

  /**
   * @param {string} s
   * @returns {ByronAddress}
   */
  static from_base58(s: string): ByronAddress;

  /**
   * @param {Bip32PublicKey} key
   * @param {number} protocol_magic
   * @returns {ByronAddress}
   */
  static icarus_from_key(
    key: Bip32PublicKey,
    protocol_magic: number,
  ): ByronAddress;

  /**
   * @param {string} s
   * @returns {boolean}
   */
  static is_valid(s: string): boolean;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {ByronAddress | void}
   */
  static from_address(addr: Address): ByronAddress | void;
}
/**
 */
declare export class Certificate {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Certificate}
   */
  static from_bytes(bytes: Uint8Array): Certificate;

  /**
   * @param {StakeRegistration} stake_registration
   * @returns {Certificate}
   */
  static new_stake_registration(
    stake_registration: StakeRegistration,
  ): Certificate;

  /**
   * @param {StakeDeregistration} stake_deregistration
   * @returns {Certificate}
   */
  static new_stake_deregistration(
    stake_deregistration: StakeDeregistration,
  ): Certificate;

  /**
   * @param {StakeDelegation} stake_delegation
   * @returns {Certificate}
   */
  static new_stake_delegation(stake_delegation: StakeDelegation): Certificate;

  /**
   * @param {PoolRegistration} pool_registration
   * @returns {Certificate}
   */
  static new_pool_registration(
    pool_registration: PoolRegistration,
  ): Certificate;

  /**
   * @param {PoolRetirement} pool_retirement
   * @returns {Certificate}
   */
  static new_pool_retirement(pool_retirement: PoolRetirement): Certificate;

  /**
   * @param {GenesisKeyDelegation} genesis_key_delegation
   * @returns {Certificate}
   */
  static new_genesis_key_delegation(
    genesis_key_delegation: GenesisKeyDelegation,
  ): Certificate;

  /**
   * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert
   * @returns {Certificate}
   */
  static new_move_instantaneous_rewards_cert(
    move_instantaneous_rewards_cert: MoveInstantaneousRewardsCert,
  ): Certificate;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {StakeRegistration | void}
   */
  as_stake_registration(): StakeRegistration | void;

  /**
   * @returns {StakeDeregistration | void}
   */
  as_stake_deregistration(): StakeDeregistration | void;

  /**
   * @returns {StakeDelegation | void}
   */
  as_stake_delegation(): StakeDelegation | void;

  /**
   * @returns {PoolRegistration | void}
   */
  as_pool_registration(): PoolRegistration | void;

  /**
   * @returns {PoolRetirement | void}
   */
  as_pool_retirement(): PoolRetirement | void;

  /**
   * @returns {GenesisKeyDelegation | void}
   */
  as_genesis_key_delegation(): GenesisKeyDelegation | void;

  /**
   * @returns {MoveInstantaneousRewardsCert | void}
   */
  as_move_instantaneous_rewards_cert(): MoveInstantaneousRewardsCert | void;
}
/**
 */
declare export class Certificates {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Certificates}
   */
  static from_bytes(bytes: Uint8Array): Certificates;

  /**
   * @returns {Certificates}
   */
  static new(): Certificates;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Certificate}
   */
  get(index: number): Certificate;

  /**
   * @param {Certificate} elem
   */
  add(elem: Certificate): void;
}
/**
 */
declare export class ConstrPlutusData {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ConstrPlutusData}
   */
  static from_bytes(bytes: Uint8Array): ConstrPlutusData;

  /**
   * @returns {Int}
   */
  tag(): Int;

  /**
   * @returns {PlutusList}
   */
  data(): PlutusList;

  /**
   * @param {Int} tag
   * @param {PlutusList} data
   * @returns {ConstrPlutusData}
   */
  static new(tag: Int, data: PlutusList): ConstrPlutusData;
}
/**
 */
declare export class CostModel {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {CostModel}
   */
  static from_bytes(bytes: Uint8Array): CostModel;

  /**
   * @returns {CostModel}
   */
  static new(): CostModel;

  /**
   * @param {number} operation
   * @param {Int} cost
   * @returns {Int}
   */
  set(operation: number, cost: Int): Int;

  /**
   * @param {number} operation
   * @returns {Int}
   */
  get(operation: number): Int;
}
/**
 */
declare export class Costmdls {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Costmdls}
   */
  static from_bytes(bytes: Uint8Array): Costmdls;

  /**
   * @returns {Costmdls}
   */
  static new(): Costmdls;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {Language} key
   * @param {CostModel} value
   * @returns {CostModel | void}
   */
  insert(key: Language, value: CostModel): CostModel | void;

  /**
   * @param {Language} key
   * @returns {CostModel | void}
   */
  get(key: Language): CostModel | void;

  /**
   * @returns {Languages}
   */
  keys(): Languages;
}
/**
 */
declare export class DNSRecordAorAAAA {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {DNSRecordAorAAAA}
   */
  static from_bytes(bytes: Uint8Array): DNSRecordAorAAAA;

  /**
   * @param {string} dns_name
   * @returns {DNSRecordAorAAAA}
   */
  static new(dns_name: string): DNSRecordAorAAAA;

  /**
   * @returns {string}
   */
  record(): string;
}
/**
 */
declare export class DNSRecordSRV {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {DNSRecordSRV}
   */
  static from_bytes(bytes: Uint8Array): DNSRecordSRV;

  /**
   * @param {string} dns_name
   * @returns {DNSRecordSRV}
   */
  static new(dns_name: string): DNSRecordSRV;

  /**
   * @returns {string}
   */
  record(): string;
}
/**
 */
declare export class DataHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {DataHash}
   */
  static from_bech32(bech_str: string): DataHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {DataHash}
   */
  static from_bytes(bytes: Uint8Array): DataHash;
}
/**
 */
declare export class Ed25519KeyHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {Ed25519KeyHash}
   */
  static from_bech32(bech_str: string): Ed25519KeyHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ed25519KeyHash}
   */
  static from_bytes(bytes: Uint8Array): Ed25519KeyHash;
}
/**
 */
declare export class Ed25519KeyHashes {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ed25519KeyHashes}
   */
  static from_bytes(bytes: Uint8Array): Ed25519KeyHashes;

  /**
   * @returns {Ed25519KeyHashes}
   */
  static new(): Ed25519KeyHashes;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Ed25519KeyHash}
   */
  get(index: number): Ed25519KeyHash;

  /**
   * @param {Ed25519KeyHash} elem
   */
  add(elem: Ed25519KeyHash): void;
}
/**
 */
declare export class Ed25519Signature {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {string}
   */
  to_hex(): string;

  /**
   * @param {string} bech32_str
   * @returns {Ed25519Signature}
   */
  static from_bech32(bech32_str: string): Ed25519Signature;

  /**
   * @param {string} input
   * @returns {Ed25519Signature}
   */
  static from_hex(input: string): Ed25519Signature;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ed25519Signature}
   */
  static from_bytes(bytes: Uint8Array): Ed25519Signature;
}
/**
 */
declare export class EnterpriseAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @returns {EnterpriseAddress}
   */
  static new(network: number, payment: StakeCredential): EnterpriseAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {EnterpriseAddress | void}
   */
  static from_address(addr: Address): EnterpriseAddress | void;
}
/**
 */
declare export class ExUnitPrices {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ExUnitPrices}
   */
  static from_bytes(bytes: Uint8Array): ExUnitPrices;

  /**
   * @returns {UnitInterval}
   */
  mem_price(): UnitInterval;

  /**
   * @returns {UnitInterval}
   */
  step_price(): UnitInterval;

  /**
   * @param {UnitInterval} mem_price
   * @param {UnitInterval} step_price
   * @returns {ExUnitPrices}
   */
  static new(mem_price: UnitInterval, step_price: UnitInterval): ExUnitPrices;
}
/**
 */
declare export class ExUnits {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ExUnits}
   */
  static from_bytes(bytes: Uint8Array): ExUnits;

  /**
   * @returns {BigNum}
   */
  mem(): BigNum;

  /**
   * @returns {BigNum}
   */
  steps(): BigNum;

  /**
   * @param {BigNum} mem
   * @param {BigNum} steps
   * @returns {ExUnits}
   */
  static new(mem: BigNum, steps: BigNum): ExUnits;
}
/**
 */
declare export class GeneralTransactionMetadata {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {GeneralTransactionMetadata}
   */
  static from_bytes(bytes: Uint8Array): GeneralTransactionMetadata;

  /**
   * @returns {GeneralTransactionMetadata}
   */
  static new(): GeneralTransactionMetadata;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {BigNum} key
   * @param {TransactionMetadatum} value
   * @returns {TransactionMetadatum | void}
   */
  insert(key: BigNum, value: TransactionMetadatum): TransactionMetadatum | void;

  /**
   * @param {BigNum} key
   * @returns {TransactionMetadatum | void}
   */
  get(key: BigNum): TransactionMetadatum | void;

  /**
   * @returns {TransactionMetadatumLabels}
   */
  keys(): TransactionMetadatumLabels;
}
/**
 */
declare export class GenesisDelegateHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {GenesisDelegateHash}
   */
  static from_bech32(bech_str: string): GenesisDelegateHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {GenesisDelegateHash}
   */
  static from_bytes(bytes: Uint8Array): GenesisDelegateHash;
}
/**
 */
declare export class GenesisHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {GenesisHash}
   */
  static from_bech32(bech_str: string): GenesisHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {GenesisHash}
   */
  static from_bytes(bytes: Uint8Array): GenesisHash;
}
/**
 */
declare export class GenesisHashes {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {GenesisHashes}
   */
  static from_bytes(bytes: Uint8Array): GenesisHashes;

  /**
   * @returns {GenesisHashes}
   */
  static new(): GenesisHashes;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {GenesisHash}
   */
  get(index: number): GenesisHash;

  /**
   * @param {GenesisHash} elem
   */
  add(elem: GenesisHash): void;
}
/**
 */
declare export class GenesisKeyDelegation {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {GenesisKeyDelegation}
   */
  static from_bytes(bytes: Uint8Array): GenesisKeyDelegation;

  /**
   * @returns {GenesisHash}
   */
  genesishash(): GenesisHash;

  /**
   * @returns {GenesisDelegateHash}
   */
  genesis_delegate_hash(): GenesisDelegateHash;

  /**
   * @returns {VRFKeyHash}
   */
  vrf_keyhash(): VRFKeyHash;

  /**
   * @param {GenesisHash} genesishash
   * @param {GenesisDelegateHash} genesis_delegate_hash
   * @param {VRFKeyHash} vrf_keyhash
   * @returns {GenesisKeyDelegation}
   */
  static new(
    genesishash: GenesisHash,
    genesis_delegate_hash: GenesisDelegateHash,
    vrf_keyhash: VRFKeyHash,
  ): GenesisKeyDelegation;
}
/**
 */
declare export class Header {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Header}
   */
  static from_bytes(bytes: Uint8Array): Header;

  /**
   * @returns {HeaderBody}
   */
  header_body(): HeaderBody;

  /**
   * @returns {KESSignature}
   */
  body_signature(): KESSignature;

  /**
   * @param {HeaderBody} header_body
   * @param {KESSignature} body_signature
   * @returns {Header}
   */
  static new(header_body: HeaderBody, body_signature: KESSignature): Header;
}
/**
 */
declare export class HeaderBody {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {HeaderBody}
   */
  static from_bytes(bytes: Uint8Array): HeaderBody;

  /**
   * @returns {number}
   */
  block_number(): number;

  /**
   * @returns {number}
   */
  slot(): number;

  /**
   * @returns {BlockHash | void}
   */
  prev_hash(): BlockHash | void;

  /**
   * @returns {Vkey}
   */
  issuer_vkey(): Vkey;

  /**
   * @returns {VRFVKey}
   */
  vrf_vkey(): VRFVKey;

  /**
   * @returns {VRFCert}
   */
  nonce_vrf(): VRFCert;

  /**
   * @returns {VRFCert}
   */
  leader_vrf(): VRFCert;

  /**
   * @returns {number}
   */
  block_body_size(): number;

  /**
   * @returns {BlockHash}
   */
  block_body_hash(): BlockHash;

  /**
   * @returns {OperationalCert}
   */
  operational_cert(): OperationalCert;

  /**
   * @returns {ProtocolVersion}
   */
  protocol_version(): ProtocolVersion;

  /**
   * @param {number} block_number
   * @param {number} slot
   * @param {BlockHash | void} prev_hash
   * @param {Vkey} issuer_vkey
   * @param {VRFVKey} vrf_vkey
   * @param {VRFCert} nonce_vrf
   * @param {VRFCert} leader_vrf
   * @param {number} block_body_size
   * @param {BlockHash} block_body_hash
   * @param {OperationalCert} operational_cert
   * @param {ProtocolVersion} protocol_version
   * @returns {HeaderBody}
   */
  static new(
    block_number: number,
    slot: number,
    prev_hash: BlockHash | void,
    issuer_vkey: Vkey,
    vrf_vkey: VRFVKey,
    nonce_vrf: VRFCert,
    leader_vrf: VRFCert,
    block_body_size: number,
    block_body_hash: BlockHash,
    operational_cert: OperationalCert,
    protocol_version: ProtocolVersion,
  ): HeaderBody;
}
/**
 */
declare export class Int {
  free(): void;

  /**
   * @param {BigNum} x
   * @returns {Int}
   */
  static new(x: BigNum): Int;

  /**
   * @param {BigNum} x
   * @returns {Int}
   */
  static new_negative(x: BigNum): Int;

  /**
   * @param {number} x
   * @returns {Int}
   */
  static new_i32(x: number): Int;

  /**
   * @returns {boolean}
   */
  is_positive(): boolean;

  /**
   * @returns {BigNum | void}
   */
  as_positive(): BigNum | void;

  /**
   * @returns {BigNum | void}
   */
  as_negative(): BigNum | void;

  /**
   * @returns {number | void}
   */
  as_i32(): number | void;
}
/**
 */
declare export class Ipv4 {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ipv4}
   */
  static from_bytes(bytes: Uint8Array): Ipv4;

  /**
   * @param {Uint8Array} data
   * @returns {Ipv4}
   */
  static new(data: Uint8Array): Ipv4;

  /**
   * @returns {Uint8Array}
   */
  ip(): Uint8Array;
}
/**
 */
declare export class Ipv6 {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Ipv6}
   */
  static from_bytes(bytes: Uint8Array): Ipv6;

  /**
   * @param {Uint8Array} data
   * @returns {Ipv6}
   */
  static new(data: Uint8Array): Ipv6;

  /**
   * @returns {Uint8Array}
   */
  ip(): Uint8Array;
}
/**
 */
declare export class KESSignature {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {KESSignature}
   */
  static from_bytes(bytes: Uint8Array): KESSignature;
}
/**
 */
declare export class KESVKey {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {KESVKey}
   */
  static from_bech32(bech_str: string): KESVKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {KESVKey}
   */
  static from_bytes(bytes: Uint8Array): KESVKey;
}
/**
 */
declare export class Language {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Language}
   */
  static from_bytes(bytes: Uint8Array): Language;

  /**
   * @returns {Language}
   */
  static new_plutus_v1(): Language;

  /**
   * @returns {number}
   */
  kind(): number;
}
/**
 */
declare export class Languages {
  free(): void;

  /**
   * @returns {Languages}
   */
  static new(): Languages;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Language}
   */
  get(index: number): Language;

  /**
   * @param {Language} elem
   */
  add(elem: Language): void;
}
/**
 */
declare export class LegacyDaedalusPrivateKey {
  free(): void;

  /**
   * @param {Uint8Array} bytes
   * @returns {LegacyDaedalusPrivateKey}
   */
  static from_bytes(bytes: Uint8Array): LegacyDaedalusPrivateKey;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @returns {Uint8Array}
   */
  chaincode(): Uint8Array;
}
/**
 */
declare export class LinearFee {
  free(): void;

  /**
   * @returns {BigNum}
   */
  constant(): BigNum;

  /**
   * @returns {BigNum}
   */
  coefficient(): BigNum;

  /**
   * @param {BigNum} coefficient
   * @param {BigNum} constant
   * @returns {LinearFee}
   */
  static new(coefficient: BigNum, constant: BigNum): LinearFee;
}
/**
 */
declare export class MIRToStakeCredentials {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MIRToStakeCredentials}
   */
  static from_bytes(bytes: Uint8Array): MIRToStakeCredentials;

  /**
   * @returns {MIRToStakeCredentials}
   */
  static new(): MIRToStakeCredentials;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {StakeCredential} cred
   * @param {Int} delta
   * @returns {Int | void}
   */
  insert(cred: StakeCredential, delta: Int): Int | void;

  /**
   * @param {StakeCredential} cred
   * @returns {Int | void}
   */
  get(cred: StakeCredential): Int | void;

  /**
   * @returns {StakeCredentials}
   */
  keys(): StakeCredentials;
}
/**
 */
declare export class MetadataList {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MetadataList}
   */
  static from_bytes(bytes: Uint8Array): MetadataList;

  /**
   * @returns {MetadataList}
   */
  static new(): MetadataList;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionMetadatum}
   */
  get(index: number): TransactionMetadatum;

  /**
   * @param {TransactionMetadatum} elem
   */
  add(elem: TransactionMetadatum): void;
}
/**
 */
declare export class MetadataMap {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MetadataMap}
   */
  static from_bytes(bytes: Uint8Array): MetadataMap;

  /**
   * @returns {MetadataMap}
   */
  static new(): MetadataMap;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {TransactionMetadatum} key
   * @param {TransactionMetadatum} value
   * @returns {TransactionMetadatum | void}
   */
  insert(
    key: TransactionMetadatum,
    value: TransactionMetadatum,
  ): TransactionMetadatum | void;

  /**
   * @param {string} key
   * @param {TransactionMetadatum} value
   * @returns {TransactionMetadatum | void}
   */
  insert_str(
    key: string,
    value: TransactionMetadatum,
  ): TransactionMetadatum | void;

  /**
   * @param {number} key
   * @param {TransactionMetadatum} value
   * @returns {TransactionMetadatum | void}
   */
  insert_i32(
    key: number,
    value: TransactionMetadatum,
  ): TransactionMetadatum | void;

  /**
   * @param {TransactionMetadatum} key
   * @returns {TransactionMetadatum}
   */
  get(key: TransactionMetadatum): TransactionMetadatum;

  /**
   * @param {string} key
   * @returns {TransactionMetadatum}
   */
  get_str(key: string): TransactionMetadatum;

  /**
   * @param {number} key
   * @returns {TransactionMetadatum}
   */
  get_i32(key: number): TransactionMetadatum;

  /**
   * @param {TransactionMetadatum} key
   * @returns {boolean}
   */
  has(key: TransactionMetadatum): boolean;

  /**
   * @returns {MetadataList}
   */
  keys(): MetadataList;
}
/**
 */
declare export class Mint {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Mint}
   */
  static from_bytes(bytes: Uint8Array): Mint;

  /**
   * @returns {Mint}
   */
  static new(): Mint;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {ScriptHash} key
   * @param {MintAssets} value
   * @returns {MintAssets | void}
   */
  insert(key: ScriptHash, value: MintAssets): MintAssets | void;

  /**
   * @param {ScriptHash} key
   * @returns {MintAssets | void}
   */
  get(key: ScriptHash): MintAssets | void;

  /**
   * @returns {ScriptHashes}
   */
  keys(): ScriptHashes;
}
/**
 */
declare export class MintAssets {
  free(): void;

  /**
   * @returns {MintAssets}
   */
  static new(): MintAssets;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {AssetName} key
   * @param {Int} value
   * @returns {Int | void}
   */
  insert(key: AssetName, value: Int): Int | void;

  /**
   * @param {AssetName} key
   * @returns {Int | void}
   */
  get(key: AssetName): Int | void;

  /**
   * @returns {AssetNames}
   */
  keys(): AssetNames;
}
/**
 */
declare export class MoveInstantaneousReward {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MoveInstantaneousReward}
   */
  static from_bytes(bytes: Uint8Array): MoveInstantaneousReward;

  /**
   * @param {number} pot
   * @param {BigNum} amount
   * @returns {MoveInstantaneousReward}
   */
  static new_to_other_pot(pot: number, amount: BigNum): MoveInstantaneousReward;

  /**
   * @param {number} pot
   * @param {MIRToStakeCredentials} amounts
   * @returns {MoveInstantaneousReward}
   */
  static new_to_stake_creds(
    pot: number,
    amounts: MIRToStakeCredentials,
  ): MoveInstantaneousReward;

  /**
   * @returns {number}
   */
  pot(): number;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {BigNum | void}
   */
  as_to_other_pot(): BigNum | void;

  /**
   * @returns {MIRToStakeCredentials | void}
   */
  as_to_stake_creds(): MIRToStakeCredentials | void;
}
/**
 */
declare export class MoveInstantaneousRewardsCert {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MoveInstantaneousRewardsCert}
   */
  static from_bytes(bytes: Uint8Array): MoveInstantaneousRewardsCert;

  /**
   * @returns {MoveInstantaneousReward}
   */
  move_instantaneous_reward(): MoveInstantaneousReward;

  /**
   * @param {MoveInstantaneousReward} move_instantaneous_reward
   * @returns {MoveInstantaneousRewardsCert}
   */
  static new(
    move_instantaneous_reward: MoveInstantaneousReward,
  ): MoveInstantaneousRewardsCert;
}
/**
 */
declare export class MultiAsset {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MultiAsset}
   */
  static from_bytes(bytes: Uint8Array): MultiAsset;

  /**
   * @returns {MultiAsset}
   */
  static new(): MultiAsset;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {ScriptHash} key
   * @param {Assets} value
   * @returns {Assets | void}
   */
  insert(key: ScriptHash, value: Assets): Assets | void;

  /**
   * @param {ScriptHash} key
   * @returns {Assets | void}
   */
  get(key: ScriptHash): Assets | void;

  /**
   * @returns {ScriptHashes}
   */
  keys(): ScriptHashes;

  /**
   * removes an asset from the list if the result is 0 or less
   * @param {MultiAsset} rhs_ma
   * @returns {MultiAsset}
   */
  sub(rhs_ma: MultiAsset): MultiAsset;
}
/**
 */
declare export class MultiHostName {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {MultiHostName}
   */
  static from_bytes(bytes: Uint8Array): MultiHostName;

  /**
   * @returns {DNSRecordSRV}
   */
  dns_name(): DNSRecordSRV;

  /**
   * @param {DNSRecordSRV} dns_name
   * @returns {MultiHostName}
   */
  static new(dns_name: DNSRecordSRV): MultiHostName;
}
/**
 */
declare export class NativeScript {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {NativeScript}
   */
  static from_bytes(bytes: Uint8Array): NativeScript;

  /**
   * @param {number} namespace
   * @returns {Ed25519KeyHash}
   */
  hash(namespace: number): Ed25519KeyHash;

  /**
   * @param {ScriptPubkey} script_pubkey
   * @returns {NativeScript}
   */
  static new_script_pubkey(script_pubkey: ScriptPubkey): NativeScript;

  /**
   * @param {ScriptAll} script_all
   * @returns {NativeScript}
   */
  static new_script_all(script_all: ScriptAll): NativeScript;

  /**
   * @param {ScriptAny} script_any
   * @returns {NativeScript}
   */
  static new_script_any(script_any: ScriptAny): NativeScript;

  /**
   * @param {ScriptNOfK} script_n_of_k
   * @returns {NativeScript}
   */
  static new_script_n_of_k(script_n_of_k: ScriptNOfK): NativeScript;

  /**
   * @param {TimelockStart} timelock_start
   * @returns {NativeScript}
   */
  static new_timelock_start(timelock_start: TimelockStart): NativeScript;

  /**
   * @param {TimelockExpiry} timelock_expiry
   * @returns {NativeScript}
   */
  static new_timelock_expiry(timelock_expiry: TimelockExpiry): NativeScript;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {ScriptPubkey | void}
   */
  as_script_pubkey(): ScriptPubkey | void;

  /**
   * @returns {ScriptAll | void}
   */
  as_script_all(): ScriptAll | void;

  /**
   * @returns {ScriptAny | void}
   */
  as_script_any(): ScriptAny | void;

  /**
   * @returns {ScriptNOfK | void}
   */
  as_script_n_of_k(): ScriptNOfK | void;

  /**
   * @returns {TimelockStart | void}
   */
  as_timelock_start(): TimelockStart | void;

  /**
   * @returns {TimelockExpiry | void}
   */
  as_timelock_expiry(): TimelockExpiry | void;
}
/**
 */
declare export class NativeScripts {
  free(): void;

  /**
   * @returns {NativeScripts}
   */
  static new(): NativeScripts;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {NativeScript}
   */
  get(index: number): NativeScript;

  /**
   * @param {NativeScript} elem
   */
  add(elem: NativeScript): void;
}
/**
 */
declare export class NetworkId {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {NetworkId}
   */
  static from_bytes(bytes: Uint8Array): NetworkId;

  /**
   * @returns {NetworkId}
   */
  static testnet(): NetworkId;

  /**
   * @returns {NetworkId}
   */
  static mainnet(): NetworkId;

  /**
   * @returns {number}
   */
  kind(): number;
}
/**
 */
declare export class NetworkInfo {
  free(): void;

  /**
   * @param {number} network_id
   * @param {number} protocol_magic
   * @returns {NetworkInfo}
   */
  static new(network_id: number, protocol_magic: number): NetworkInfo;

  /**
   * @returns {number}
   */
  network_id(): number;

  /**
   * @returns {number}
   */
  protocol_magic(): number;

  /**
   * @returns {NetworkInfo}
   */
  static testnet(): NetworkInfo;

  /**
   * @returns {NetworkInfo}
   */
  static mainnet(): NetworkInfo;
}
/**
 */
declare export class Nonce {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Nonce}
   */
  static from_bytes(bytes: Uint8Array): Nonce;

  /**
   * @returns {Nonce}
   */
  static new_identity(): Nonce;

  /**
   * @param {Uint8Array} hash
   * @returns {Nonce}
   */
  static new_from_hash(hash: Uint8Array): Nonce;

  /**
   * @returns {Uint8Array | void}
   */
  get_hash(): Uint8Array | void;
}
/**
 */
declare export class OperationalCert {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {OperationalCert}
   */
  static from_bytes(bytes: Uint8Array): OperationalCert;

  /**
   * @returns {KESVKey}
   */
  hot_vkey(): KESVKey;

  /**
   * @returns {number}
   */
  sequence_number(): number;

  /**
   * @returns {number}
   */
  kes_period(): number;

  /**
   * @returns {Ed25519Signature}
   */
  sigma(): Ed25519Signature;

  /**
   * @param {KESVKey} hot_vkey
   * @param {number} sequence_number
   * @param {number} kes_period
   * @param {Ed25519Signature} sigma
   * @returns {OperationalCert}
   */
  static new(
    hot_vkey: KESVKey,
    sequence_number: number,
    kes_period: number,
    sigma: Ed25519Signature,
  ): OperationalCert;
}
/**
 */
declare export class PlutusData {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PlutusData}
   */
  static from_bytes(bytes: Uint8Array): PlutusData;

  /**
   * @param {ConstrPlutusData} constr_plutus_data
   * @returns {PlutusData}
   */
  static new_constr_plutus_data(
    constr_plutus_data: ConstrPlutusData,
  ): PlutusData;

  /**
   * @param {PlutusMap} map
   * @returns {PlutusData}
   */
  static new_map(map: PlutusMap): PlutusData;

  /**
   * @param {PlutusList} list
   * @returns {PlutusData}
   */
  static new_list(list: PlutusList): PlutusData;

  /**
   * @param {BigInt} integer
   * @returns {PlutusData}
   */
  static new_integer(integer: BigInt): PlutusData;

  /**
   * @param {Uint8Array} bytes
   * @returns {PlutusData}
   */
  static new_bytes(bytes: Uint8Array): PlutusData;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {ConstrPlutusData | void}
   */
  as_constr_plutus_data(): ConstrPlutusData | void;

  /**
   * @returns {PlutusMap | void}
   */
  as_map(): PlutusMap | void;

  /**
   * @returns {PlutusList | void}
   */
  as_list(): PlutusList | void;

  /**
   * @returns {BigInt | void}
   */
  as_integer(): BigInt | void;

  /**
   * @returns {Uint8Array | void}
   */
  as_bytes(): Uint8Array | void;
}
/**
 */
declare export class PlutusList {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PlutusList}
   */
  static from_bytes(bytes: Uint8Array): PlutusList;

  /**
   * @returns {PlutusList}
   */
  static new(): PlutusList;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {PlutusData}
   */
  get(index: number): PlutusData;

  /**
   * @param {PlutusData} elem
   */
  add(elem: PlutusData): void;
}
/**
 */
declare export class PlutusMap {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PlutusMap}
   */
  static from_bytes(bytes: Uint8Array): PlutusMap;

  /**
   * @returns {PlutusMap}
   */
  static new(): PlutusMap;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {PlutusData} key
   * @param {PlutusData} value
   * @returns {PlutusData | void}
   */
  insert(key: PlutusData, value: PlutusData): PlutusData | void;

  /**
   * @param {PlutusData} key
   * @returns {PlutusData | void}
   */
  get(key: PlutusData): PlutusData | void;

  /**
   * @returns {PlutusList}
   */
  keys(): PlutusList;
}
/**
 */
declare export class PlutusScript {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PlutusScript}
   */
  static from_bytes(bytes: Uint8Array): PlutusScript;

  /**
   * @param {Uint8Array} bytes
   * @returns {PlutusScript}
   */
  static new(bytes: Uint8Array): PlutusScript;

  /**
   * @returns {Uint8Array}
   */
  bytes(): Uint8Array;
}
/**
 */
declare export class PlutusScripts {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PlutusScripts}
   */
  static from_bytes(bytes: Uint8Array): PlutusScripts;

  /**
   * @returns {PlutusScripts}
   */
  static new(): PlutusScripts;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {PlutusScript}
   */
  get(index: number): PlutusScript;

  /**
   * @param {PlutusScript} elem
   */
  add(elem: PlutusScript): void;
}
/**
 */
declare export class Pointer {
  free(): void;

  /**
   * @param {number} slot
   * @param {number} tx_index
   * @param {number} cert_index
   * @returns {Pointer}
   */
  static new(slot: number, tx_index: number, cert_index: number): Pointer;

  /**
   * @returns {number}
   */
  slot(): number;

  /**
   * @returns {number}
   */
  tx_index(): number;

  /**
   * @returns {number}
   */
  cert_index(): number;
}
/**
 */
declare export class PointerAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @param {Pointer} stake
   * @returns {PointerAddress}
   */
  static new(
    network: number,
    payment: StakeCredential,
    stake: Pointer,
  ): PointerAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {Pointer}
   */
  stake_pointer(): Pointer;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {PointerAddress | void}
   */
  static from_address(addr: Address): PointerAddress | void;
}
/**
 */
declare export class PoolMetadata {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolMetadata}
   */
  static from_bytes(bytes: Uint8Array): PoolMetadata;

  /**
   * @returns {URL}
   */
  url(): URL;

  /**
   * @returns {PoolMetadataHash}
   */
  pool_metadata_hash(): PoolMetadataHash;

  /**
   * @param {URL} url
   * @param {PoolMetadataHash} pool_metadata_hash
   * @returns {PoolMetadata}
   */
  static new(url: URL, pool_metadata_hash: PoolMetadataHash): PoolMetadata;
}
/**
 */
declare export class PoolMetadataHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {PoolMetadataHash}
   */
  static from_bech32(bech_str: string): PoolMetadataHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolMetadataHash}
   */
  static from_bytes(bytes: Uint8Array): PoolMetadataHash;
}
/**
 */
declare export class PoolParams {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolParams}
   */
  static from_bytes(bytes: Uint8Array): PoolParams;

  /**
   * @returns {Ed25519KeyHash}
   */
  operator(): Ed25519KeyHash;

  /**
   * @returns {VRFKeyHash}
   */
  vrf_keyhash(): VRFKeyHash;

  /**
   * @returns {BigNum}
   */
  pledge(): BigNum;

  /**
   * @returns {BigNum}
   */
  cost(): BigNum;

  /**
   * @returns {UnitInterval}
   */
  margin(): UnitInterval;

  /**
   * @returns {RewardAddress}
   */
  reward_account(): RewardAddress;

  /**
   * @returns {Ed25519KeyHashes}
   */
  pool_owners(): Ed25519KeyHashes;

  /**
   * @returns {Relays}
   */
  relays(): Relays;

  /**
   * @returns {PoolMetadata | void}
   */
  pool_metadata(): PoolMetadata | void;

  /**
   * @param {Ed25519KeyHash} operator
   * @param {VRFKeyHash} vrf_keyhash
   * @param {BigNum} pledge
   * @param {BigNum} cost
   * @param {UnitInterval} margin
   * @param {RewardAddress} reward_account
   * @param {Ed25519KeyHashes} pool_owners
   * @param {Relays} relays
   * @param {PoolMetadata | void} pool_metadata
   * @returns {PoolParams}
   */
  static new(
    operator: Ed25519KeyHash,
    vrf_keyhash: VRFKeyHash,
    pledge: BigNum,
    cost: BigNum,
    margin: UnitInterval,
    reward_account: RewardAddress,
    pool_owners: Ed25519KeyHashes,
    relays: Relays,
    pool_metadata?: PoolMetadata,
  ): PoolParams;
}
/**
 */
declare export class PoolRegistration {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolRegistration}
   */
  static from_bytes(bytes: Uint8Array): PoolRegistration;

  /**
   * @returns {PoolParams}
   */
  pool_params(): PoolParams;

  /**
   * @param {PoolParams} pool_params
   * @returns {PoolRegistration}
   */
  static new(pool_params: PoolParams): PoolRegistration;
}
/**
 */
declare export class PoolRetirement {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PoolRetirement}
   */
  static from_bytes(bytes: Uint8Array): PoolRetirement;

  /**
   * @returns {Ed25519KeyHash}
   */
  pool_keyhash(): Ed25519KeyHash;

  /**
   * @returns {number}
   */
  epoch(): number;

  /**
   * @param {Ed25519KeyHash} pool_keyhash
   * @param {number} epoch
   * @returns {PoolRetirement}
   */
  static new(pool_keyhash: Ed25519KeyHash, epoch: number): PoolRetirement;
}
/**
 */
declare export class PrivateKey {
  free(): void;

  /**
   * @returns {PublicKey}
   */
  to_public(): PublicKey;

  /**
   * @returns {PrivateKey}
   */
  static generate_ed25519(): PrivateKey;

  /**
   * @returns {PrivateKey}
   */
  static generate_ed25519extended(): PrivateKey;

  /**
   * Get private key from its bech32 representation
   * ```javascript
   * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);
   * ```
   * For an extended 25519 key
   * ```javascript
   * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);
   * ```
   * @param {string} bech32_str
   * @returns {PrivateKey}
   */
  static from_bech32(bech32_str: string): PrivateKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PrivateKey}
   */
  static from_extended_bytes(bytes: Uint8Array): PrivateKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {PrivateKey}
   */
  static from_normal_bytes(bytes: Uint8Array): PrivateKey;

  /**
   * @param {Uint8Array} message
   * @returns {Ed25519Signature}
   */
  sign(message: Uint8Array): Ed25519Signature;
}
/**
 */
declare export class ProposedProtocolParameterUpdates {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ProposedProtocolParameterUpdates}
   */
  static from_bytes(bytes: Uint8Array): ProposedProtocolParameterUpdates;

  /**
   * @returns {ProposedProtocolParameterUpdates}
   */
  static new(): ProposedProtocolParameterUpdates;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {GenesisHash} key
   * @param {ProtocolParamUpdate} value
   * @returns {ProtocolParamUpdate | void}
   */
  insert(
    key: GenesisHash,
    value: ProtocolParamUpdate,
  ): ProtocolParamUpdate | void;

  /**
   * @param {GenesisHash} key
   * @returns {ProtocolParamUpdate | void}
   */
  get(key: GenesisHash): ProtocolParamUpdate | void;

  /**
   * @returns {GenesisHashes}
   */
  keys(): GenesisHashes;
}
/**
 */
declare export class ProtocolParamUpdate {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ProtocolParamUpdate}
   */
  static from_bytes(bytes: Uint8Array): ProtocolParamUpdate;

  /**
   * @param {BigNum} minfee_a
   */
  set_minfee_a(minfee_a: BigNum): void;

  /**
   * @returns {BigNum | void}
   */
  minfee_a(): BigNum | void;

  /**
   * @param {BigNum} minfee_b
   */
  set_minfee_b(minfee_b: BigNum): void;

  /**
   * @returns {BigNum | void}
   */
  minfee_b(): BigNum | void;

  /**
   * @param {number} max_block_body_size
   */
  set_max_block_body_size(max_block_body_size: number): void;

  /**
   * @returns {number | void}
   */
  max_block_body_size(): number | void;

  /**
   * @param {number} max_tx_size
   */
  set_max_tx_size(max_tx_size: number): void;

  /**
   * @returns {number | void}
   */
  max_tx_size(): number | void;

  /**
   * @param {number} max_block_header_size
   */
  set_max_block_header_size(max_block_header_size: number): void;

  /**
   * @returns {number | void}
   */
  max_block_header_size(): number | void;

  /**
   * @param {BigNum} key_deposit
   */
  set_key_deposit(key_deposit: BigNum): void;

  /**
   * @returns {BigNum | void}
   */
  key_deposit(): BigNum | void;

  /**
   * @param {BigNum} pool_deposit
   */
  set_pool_deposit(pool_deposit: BigNum): void;

  /**
   * @returns {BigNum | void}
   */
  pool_deposit(): BigNum | void;

  /**
   * @param {number} max_epoch
   */
  set_max_epoch(max_epoch: number): void;

  /**
   * @returns {number | void}
   */
  max_epoch(): number | void;

  /**
   * @param {number} n_opt
   */
  set_n_opt(n_opt: number): void;

  /**
   * @returns {number | void}
   */
  n_opt(): number | void;

  /**
   * @param {UnitInterval} pool_pledge_influence
   */
  set_pool_pledge_influence(pool_pledge_influence: UnitInterval): void;

  /**
   * @returns {UnitInterval | void}
   */
  pool_pledge_influence(): UnitInterval | void;

  /**
   * @param {UnitInterval} expansion_rate
   */
  set_expansion_rate(expansion_rate: UnitInterval): void;

  /**
   * @returns {UnitInterval | void}
   */
  expansion_rate(): UnitInterval | void;

  /**
   * @param {UnitInterval} treasury_growth_rate
   */
  set_treasury_growth_rate(treasury_growth_rate: UnitInterval): void;

  /**
   * @returns {UnitInterval | void}
   */
  treasury_growth_rate(): UnitInterval | void;

  /**
   * @param {UnitInterval} d
   */
  set_d(d: UnitInterval): void;

  /**
   * @returns {UnitInterval | void}
   */
  d(): UnitInterval | void;

  /**
   * @param {Nonce} extra_entropy
   */
  set_extra_entropy(extra_entropy: Nonce): void;

  /**
   * @returns {Nonce | void}
   */
  extra_entropy(): Nonce | void;

  /**
   * @param {ProtocolVersions} protocol_version
   */
  set_protocol_version(protocol_version: ProtocolVersions): void;

  /**
   * @returns {ProtocolVersions | void}
   */
  protocol_version(): ProtocolVersions | void;

  /**
   * @param {BigNum} min_pool_cost
   */
  set_min_pool_cost(min_pool_cost: BigNum): void;

  /**
   * @returns {BigNum | void}
   */
  min_pool_cost(): BigNum | void;

  /**
   * @param {BigNum} ada_per_utxo_byte
   */
  set_ada_per_utxo_byte(ada_per_utxo_byte: BigNum): void;

  /**
   * @returns {BigNum | void}
   */
  ada_per_utxo_byte(): BigNum | void;

  /**
   * @param {Costmdls} cost_models
   */
  set_cost_models(cost_models: Costmdls): void;

  /**
   * @returns {Costmdls | void}
   */
  cost_models(): Costmdls | void;

  /**
   * @param {ExUnitPrices} execution_costs
   */
  set_execution_costs(execution_costs: ExUnitPrices): void;

  /**
   * @returns {ExUnitPrices | void}
   */
  execution_costs(): ExUnitPrices | void;

  /**
   * @param {ExUnits} max_tx_ex_units
   */
  set_max_tx_ex_units(max_tx_ex_units: ExUnits): void;

  /**
   * @returns {ExUnits | void}
   */
  max_tx_ex_units(): ExUnits | void;

  /**
   * @param {ExUnits} max_block_ex_units
   */
  set_max_block_ex_units(max_block_ex_units: ExUnits): void;

  /**
   * @returns {ExUnits | void}
   */
  max_block_ex_units(): ExUnits | void;

  /**
   * @param {number} max_value_size
   */
  set_max_value_size(max_value_size: number): void;

  /**
   * @returns {number | void}
   */
  max_value_size(): number | void;

  /**
   * @returns {ProtocolParamUpdate}
   */
  static new(): ProtocolParamUpdate;
}
/**
 */
declare export class ProtocolVersion {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ProtocolVersion}
   */
  static from_bytes(bytes: Uint8Array): ProtocolVersion;

  /**
   * @returns {number}
   */
  major(): number;

  /**
   * @returns {number}
   */
  minor(): number;

  /**
   * @param {number} major
   * @param {number} minor
   * @returns {ProtocolVersion}
   */
  static new(major: number, minor: number): ProtocolVersion;
}
/**
 */
declare export class ProtocolVersions {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ProtocolVersions}
   */
  static from_bytes(bytes: Uint8Array): ProtocolVersions;

  /**
   * @returns {ProtocolVersions}
   */
  static new(): ProtocolVersions;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {ProtocolVersion}
   */
  get(index: number): ProtocolVersion;

  /**
   * @param {ProtocolVersion} elem
   */
  add(elem: ProtocolVersion): void;
}
/**
 * ED25519 key used as public key
 */
declare export class PublicKey {
  free(): void;

  /**
   * Get public key from its bech32 representation
   * Example:
   * ```javascript
   * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);
   * ```
   * @param {string} bech32_str
   * @returns {PublicKey}
   */
  static from_bech32(bech32_str: string): PublicKey;

  /**
   * @returns {string}
   */
  to_bech32(): string;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {PublicKey}
   */
  static from_bytes(bytes: Uint8Array): PublicKey;

  /**
   * @param {Uint8Array} data
   * @param {Ed25519Signature} signature
   * @returns {boolean}
   */
  verify(data: Uint8Array, signature: Ed25519Signature): boolean;

  /**
   * @returns {Ed25519KeyHash}
   */
  hash(): Ed25519KeyHash;
}
/**
 */
declare export class PublicKeys {
  free(): void;

  /**
   */
  constructor(): this;

  /**
   * @returns {number}
   */
  size(): number;

  /**
   * @param {number} index
   * @returns {PublicKey}
   */
  get(index: number): PublicKey;

  /**
   * @param {PublicKey} key
   */
  add(key: PublicKey): void;
}
/**
 */
declare export class Redeemer {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Redeemer}
   */
  static from_bytes(bytes: Uint8Array): Redeemer;

  /**
   * @returns {RedeemerTag}
   */
  tag(): RedeemerTag;

  /**
   * @returns {BigNum}
   */
  index(): BigNum;

  /**
   * @returns {PlutusData}
   */
  data(): PlutusData;

  /**
   * @returns {ExUnits}
   */
  ex_units(): ExUnits;

  /**
   * @param {RedeemerTag} tag
   * @param {BigNum} index
   * @param {PlutusData} data
   * @param {ExUnits} ex_units
   * @returns {Redeemer}
   */
  static new(
    tag: RedeemerTag,
    index: BigNum,
    data: PlutusData,
    ex_units: ExUnits,
  ): Redeemer;
}
/**
 */
declare export class RedeemerTag {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {RedeemerTag}
   */
  static from_bytes(bytes: Uint8Array): RedeemerTag;

  /**
   * @returns {RedeemerTag}
   */
  static new_spend(): RedeemerTag;

  /**
   * @returns {RedeemerTag}
   */
  static new_mint(): RedeemerTag;

  /**
   * @returns {RedeemerTag}
   */
  static new_cert(): RedeemerTag;

  /**
   * @returns {RedeemerTag}
   */
  static new_reward(): RedeemerTag;

  /**
   * @returns {number}
   */
  kind(): number;
}
/**
 */
declare export class Redeemers {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Redeemers}
   */
  static from_bytes(bytes: Uint8Array): Redeemers;

  /**
   * @returns {Redeemers}
   */
  static new(): Redeemers;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Redeemer}
   */
  get(index: number): Redeemer;

  /**
   * @param {Redeemer} elem
   */
  add(elem: Redeemer): void;
}
/**
 */
declare export class Relay {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Relay}
   */
  static from_bytes(bytes: Uint8Array): Relay;

  /**
   * @param {SingleHostAddr} single_host_addr
   * @returns {Relay}
   */
  static new_single_host_addr(single_host_addr: SingleHostAddr): Relay;

  /**
   * @param {SingleHostName} single_host_name
   * @returns {Relay}
   */
  static new_single_host_name(single_host_name: SingleHostName): Relay;

  /**
   * @param {MultiHostName} multi_host_name
   * @returns {Relay}
   */
  static new_multi_host_name(multi_host_name: MultiHostName): Relay;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {SingleHostAddr | void}
   */
  as_single_host_addr(): SingleHostAddr | void;

  /**
   * @returns {SingleHostName | void}
   */
  as_single_host_name(): SingleHostName | void;

  /**
   * @returns {MultiHostName | void}
   */
  as_multi_host_name(): MultiHostName | void;
}
/**
 */
declare export class Relays {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Relays}
   */
  static from_bytes(bytes: Uint8Array): Relays;

  /**
   * @returns {Relays}
   */
  static new(): Relays;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Relay}
   */
  get(index: number): Relay;

  /**
   * @param {Relay} elem
   */
  add(elem: Relay): void;
}
/**
 */
declare export class RewardAddress {
  free(): void;

  /**
   * @param {number} network
   * @param {StakeCredential} payment
   * @returns {RewardAddress}
   */
  static new(network: number, payment: StakeCredential): RewardAddress;

  /**
   * @returns {StakeCredential}
   */
  payment_cred(): StakeCredential;

  /**
   * @returns {Address}
   */
  to_address(): Address;

  /**
   * @param {Address} addr
   * @returns {RewardAddress | void}
   */
  static from_address(addr: Address): RewardAddress | void;
}
/**
 */
declare export class RewardAddresses {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {RewardAddresses}
   */
  static from_bytes(bytes: Uint8Array): RewardAddresses;

  /**
   * @returns {RewardAddresses}
   */
  static new(): RewardAddresses;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {RewardAddress}
   */
  get(index: number): RewardAddress;

  /**
   * @param {RewardAddress} elem
   */
  add(elem: RewardAddress): void;
}
/**
 */
declare export class ScriptAll {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptAll}
   */
  static from_bytes(bytes: Uint8Array): ScriptAll;

  /**
   * @returns {NativeScripts}
   */
  native_scripts(): NativeScripts;

  /**
   * @param {NativeScripts} native_scripts
   * @returns {ScriptAll}
   */
  static new(native_scripts: NativeScripts): ScriptAll;
}
/**
 */
declare export class ScriptAny {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptAny}
   */
  static from_bytes(bytes: Uint8Array): ScriptAny;

  /**
   * @returns {NativeScripts}
   */
  native_scripts(): NativeScripts;

  /**
   * @param {NativeScripts} native_scripts
   * @returns {ScriptAny}
   */
  static new(native_scripts: NativeScripts): ScriptAny;
}
/**
 */
declare export class ScriptDataHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {ScriptDataHash}
   */
  static from_bech32(bech_str: string): ScriptDataHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptDataHash}
   */
  static from_bytes(bytes: Uint8Array): ScriptDataHash;
}
/**
 */
declare export class ScriptHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {ScriptHash}
   */
  static from_bech32(bech_str: string): ScriptHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptHash}
   */
  static from_bytes(bytes: Uint8Array): ScriptHash;
}
/**
 */
declare export class ScriptHashes {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptHashes}
   */
  static from_bytes(bytes: Uint8Array): ScriptHashes;

  /**
   * @returns {ScriptHashes}
   */
  static new(): ScriptHashes;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {ScriptHash}
   */
  get(index: number): ScriptHash;

  /**
   * @param {ScriptHash} elem
   */
  add(elem: ScriptHash): void;
}
/**
 */
declare export class ScriptNOfK {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptNOfK}
   */
  static from_bytes(bytes: Uint8Array): ScriptNOfK;

  /**
   * @returns {number}
   */
  n(): number;

  /**
   * @returns {NativeScripts}
   */
  native_scripts(): NativeScripts;

  /**
   * @param {number} n
   * @param {NativeScripts} native_scripts
   * @returns {ScriptNOfK}
   */
  static new(n: number, native_scripts: NativeScripts): ScriptNOfK;
}
/**
 */
declare export class ScriptPubkey {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {ScriptPubkey}
   */
  static from_bytes(bytes: Uint8Array): ScriptPubkey;

  /**
   * @returns {Ed25519KeyHash}
   */
  addr_keyhash(): Ed25519KeyHash;

  /**
   * @param {Ed25519KeyHash} addr_keyhash
   * @returns {ScriptPubkey}
   */
  static new(addr_keyhash: Ed25519KeyHash): ScriptPubkey;
}
/**
 */
declare export class SingleHostAddr {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {SingleHostAddr}
   */
  static from_bytes(bytes: Uint8Array): SingleHostAddr;

  /**
   * @returns {number | void}
   */
  port(): number | void;

  /**
   * @returns {Ipv4 | void}
   */
  ipv4(): Ipv4 | void;

  /**
   * @returns {Ipv6 | void}
   */
  ipv6(): Ipv6 | void;

  /**
   * @param {number | void} port
   * @param {Ipv4 | void} ipv4
   * @param {Ipv6 | void} ipv6
   * @returns {SingleHostAddr}
   */
  static new(port?: number, ipv4?: Ipv4, ipv6?: Ipv6): SingleHostAddr;
}
/**
 */
declare export class SingleHostName {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {SingleHostName}
   */
  static from_bytes(bytes: Uint8Array): SingleHostName;

  /**
   * @returns {number | void}
   */
  port(): number | void;

  /**
   * @returns {DNSRecordAorAAAA}
   */
  dns_name(): DNSRecordAorAAAA;

  /**
   * @param {number | void} port
   * @param {DNSRecordAorAAAA} dns_name
   * @returns {SingleHostName}
   */
  static new(port: number | void, dns_name: DNSRecordAorAAAA): SingleHostName;
}
/**
 */
declare export class StakeCredential {
  free(): void;

  /**
   * @param {Ed25519KeyHash} hash
   * @returns {StakeCredential}
   */
  static from_keyhash(hash: Ed25519KeyHash): StakeCredential;

  /**
   * @param {ScriptHash} hash
   * @returns {StakeCredential}
   */
  static from_scripthash(hash: ScriptHash): StakeCredential;

  /**
   * @returns {Ed25519KeyHash | void}
   */
  to_keyhash(): Ed25519KeyHash | void;

  /**
   * @returns {ScriptHash | void}
   */
  to_scripthash(): ScriptHash | void;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeCredential}
   */
  static from_bytes(bytes: Uint8Array): StakeCredential;
}
/**
 */
declare export class StakeCredentials {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeCredentials}
   */
  static from_bytes(bytes: Uint8Array): StakeCredentials;

  /**
   * @returns {StakeCredentials}
   */
  static new(): StakeCredentials;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {StakeCredential}
   */
  get(index: number): StakeCredential;

  /**
   * @param {StakeCredential} elem
   */
  add(elem: StakeCredential): void;
}
/**
 */
declare export class StakeDelegation {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeDelegation}
   */
  static from_bytes(bytes: Uint8Array): StakeDelegation;

  /**
   * @returns {StakeCredential}
   */
  stake_credential(): StakeCredential;

  /**
   * @returns {Ed25519KeyHash}
   */
  pool_keyhash(): Ed25519KeyHash;

  /**
   * @param {StakeCredential} stake_credential
   * @param {Ed25519KeyHash} pool_keyhash
   * @returns {StakeDelegation}
   */
  static new(
    stake_credential: StakeCredential,
    pool_keyhash: Ed25519KeyHash,
  ): StakeDelegation;
}
/**
 */
declare export class StakeDeregistration {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeDeregistration}
   */
  static from_bytes(bytes: Uint8Array): StakeDeregistration;

  /**
   * @returns {StakeCredential}
   */
  stake_credential(): StakeCredential;

  /**
   * @param {StakeCredential} stake_credential
   * @returns {StakeDeregistration}
   */
  static new(stake_credential: StakeCredential): StakeDeregistration;
}
/**
 */
declare export class StakeRegistration {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {StakeRegistration}
   */
  static from_bytes(bytes: Uint8Array): StakeRegistration;

  /**
   * @returns {StakeCredential}
   */
  stake_credential(): StakeCredential;

  /**
   * @param {StakeCredential} stake_credential
   * @returns {StakeRegistration}
   */
  static new(stake_credential: StakeCredential): StakeRegistration;
}
/**
 */
declare export class Strings {
  free(): void;

  /**
   * @returns {Strings}
   */
  static new(): Strings;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {string}
   */
  get(index: number): string;

  /**
   * @param {string} elem
   */
  add(elem: string): void;
}
/**
 */
declare export class TimelockExpiry {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TimelockExpiry}
   */
  static from_bytes(bytes: Uint8Array): TimelockExpiry;

  /**
   * @returns {number}
   */
  slot(): number;

  /**
   * @param {number} slot
   * @returns {TimelockExpiry}
   */
  static new(slot: number): TimelockExpiry;
}
/**
 */
declare export class TimelockStart {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TimelockStart}
   */
  static from_bytes(bytes: Uint8Array): TimelockStart;

  /**
   * @returns {number}
   */
  slot(): number;

  /**
   * @param {number} slot
   * @returns {TimelockStart}
   */
  static new(slot: number): TimelockStart;
}
/**
 */
declare export class Transaction {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Transaction}
   */
  static from_bytes(bytes: Uint8Array): Transaction;

  /**
   * @returns {TransactionBody}
   */
  body(): TransactionBody;

  /**
   * @returns {TransactionWitnessSet}
   */
  witness_set(): TransactionWitnessSet;

  /**
   * @returns {AuxiliaryData | void}
   */
  auxiliary_data(): AuxiliaryData | void;

  /**
   * @param {TransactionBody} body
   * @param {TransactionWitnessSet} witness_set
   * @param {AuxiliaryData | void} auxiliary_data
   * @returns {Transaction}
   */
  static new(
    body: TransactionBody,
    witness_set: TransactionWitnessSet,
    auxiliary_data?: AuxiliaryData,
  ): Transaction;
}
/**
 */
declare export class TransactionBodies {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionBodies}
   */
  static from_bytes(bytes: Uint8Array): TransactionBodies;

  /**
   * @returns {TransactionBodies}
   */
  static new(): TransactionBodies;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionBody}
   */
  get(index: number): TransactionBody;

  /**
   * @param {TransactionBody} elem
   */
  add(elem: TransactionBody): void;
}
/**
 */
declare export class TransactionBody {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionBody}
   */
  static from_bytes(bytes: Uint8Array): TransactionBody;

  /**
   * @returns {TransactionInputs}
   */
  inputs(): TransactionInputs;

  /**
   * @returns {TransactionOutputs}
   */
  outputs(): TransactionOutputs;

  /**
   * @returns {BigNum}
   */
  fee(): BigNum;

  /**
   * @returns {number | void}
   */
  ttl(): number | void;

  /**
   * @param {Certificates} certs
   */
  set_certs(certs: Certificates): void;

  /**
   * @returns {Certificates | void}
   */
  certs(): Certificates | void;

  /**
   * @param {Withdrawals} withdrawals
   */
  set_withdrawals(withdrawals: Withdrawals): void;

  /**
   * @returns {Withdrawals | void}
   */
  withdrawals(): Withdrawals | void;

  /**
   * @param {Update} update
   */
  set_update(update: Update): void;

  /**
   * @returns {Update | void}
   */
  update(): Update | void;

  /**
   * @param {AuxiliaryDataHash} auxiliary_data_hash
   */
  set_auxiliary_data_hash(auxiliary_data_hash: AuxiliaryDataHash): void;

  /**
   * @returns {AuxiliaryDataHash | void}
   */
  auxiliary_data_hash(): AuxiliaryDataHash | void;

  /**
   * @param {number} validity_start_interval
   */
  set_validity_start_interval(validity_start_interval: number): void;

  /**
   * @returns {number | void}
   */
  validity_start_interval(): number | void;

  /**
   * @param {Mint} mint
   */
  set_mint(mint: Mint): void;

  /**
   * @returns {Mint | void}
   */
  multiassets(): Mint | void;

  /**
   * @param {ScriptDataHash} script_data_hash
   */
  set_script_data_hash(script_data_hash: ScriptDataHash): void;

  /**
   * @returns {ScriptDataHash | void}
   */
  script_data_hash(): ScriptDataHash | void;

  /**
   * @param {TransactionInputs} collateral
   */
  set_collateral(collateral: TransactionInputs): void;

  /**
   * @returns {TransactionInputs | void}
   */
  collateral(): TransactionInputs | void;

  /**
   * @param {Ed25519KeyHashes} required_signers
   */
  set_required_signers(required_signers: Ed25519KeyHashes): void;

  /**
   * @returns {Ed25519KeyHashes | void}
   */
  required_signers(): Ed25519KeyHashes | void;

  /**
   * @param {NetworkId} network_id
   */
  set_network_id(network_id: NetworkId): void;

  /**
   * @returns {NetworkId | void}
   */
  network_id(): NetworkId | void;

  /**
   * @param {TransactionInputs} inputs
   * @param {TransactionOutputs} outputs
   * @param {BigNum} fee
   * @param {number | void} ttl
   * @returns {TransactionBody}
   */
  static new(
    inputs: TransactionInputs,
    outputs: TransactionOutputs,
    fee: BigNum,
    ttl?: number,
  ): TransactionBody;
}
/**
 */
declare export class TransactionBuilder {
  free(): void;

  /**
   * @param {Ed25519KeyHash} hash
   * @param {TransactionInput} input
   * @param {Value} amount
   */
  add_key_input(
    hash: Ed25519KeyHash,
    input: TransactionInput,
    amount: Value,
  ): void;

  /**
   * @param {ScriptHash} hash
   * @param {TransactionInput} input
   * @param {Value} amount
   */
  add_script_input(
    hash: ScriptHash,
    input: TransactionInput,
    amount: Value,
  ): void;

  /**
   * @param {ByronAddress} hash
   * @param {TransactionInput} input
   * @param {Value} amount
   */
  add_bootstrap_input(
    hash: ByronAddress,
    input: TransactionInput,
    amount: Value,
  ): void;

  /**
   * @param {Address} address
   * @param {TransactionInput} input
   * @param {Value} amount
   */
  add_input(address: Address, input: TransactionInput, amount: Value): void;

  /**
   * calculates how much the fee would increase if you added a given output
   * @param {Address} address
   * @param {TransactionInput} input
   * @param {Value} amount
   * @returns {BigNum}
   */
  fee_for_input(
    address: Address,
    input: TransactionInput,
    amount: Value,
  ): BigNum;

  /**
   * @param {TransactionOutput} output
   */
  add_output(output: TransactionOutput): void;

  /**
   * calculates how much the fee would increase if you added a given output
   * @param {TransactionOutput} output
   * @returns {BigNum}
   */
  fee_for_output(output: TransactionOutput): BigNum;

  /**
   * @param {BigNum} fee
   */
  set_fee(fee: BigNum): void;

  /**
   * @param {number} ttl
   */
  set_ttl(ttl: number): void;

  /**
   * @param {number} validity_start_interval
   */
  set_validity_start_interval(validity_start_interval: number): void;

  /**
   * @param {Certificates} certs
   */
  set_certs(certs: Certificates): void;

  /**
   * @param {Withdrawals} withdrawals
   */
  set_withdrawals(withdrawals: Withdrawals): void;

  /**
   * @param {AuxiliaryData} auxiliary_data
   */
  set_auxiliary_data(auxiliary_data: AuxiliaryData): void;

  /**
   * @param {boolean} prefer_pure_change
   */
  set_prefer_pure_change(prefer_pure_change: boolean): void;

  /**
   * @param {LinearFee} linear_fee
   * @param {BigNum} minimum_utxo_val
   * @param {BigNum} pool_deposit
   * @param {BigNum} key_deposit
   * @param {number} max_value_size
   * @param {number} max_tx_size
   * @returns {TransactionBuilder}
   */
  static new(
    linear_fee: LinearFee,
    minimum_utxo_val: BigNum,
    pool_deposit: BigNum,
    key_deposit: BigNum,
    max_value_size: number,
    max_tx_size: number,
  ): TransactionBuilder;

  /**
   * does not include refunds or withdrawals
   * @returns {Value}
   */
  get_explicit_input(): Value;

  /**
   * withdrawals and refunds
   * @returns {Value}
   */
  get_implicit_input(): Value;

  /**
   * does not include fee
   * @returns {Value}
   */
  get_explicit_output(): Value;

  /**
   * @returns {BigNum}
   */
  get_deposit(): BigNum;

  /**
   * @returns {BigNum | void}
   */
  get_fee_if_set(): BigNum | void;

  /**
   * Warning: this function will mutate the /fee/ field
   * @param {Address} address
   * @returns {boolean}
   */
  add_change_if_needed(address: Address): boolean;

  /**
   * @returns {number}
   */
  full_size(): number;

  /**
   * @returns {Uint32Array}
   */
  output_sizes(): Uint32Array;

  /**
   * @returns {TransactionBody}
   */
  build(): TransactionBody;

  /**
   * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it
   * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)
   * this is done to simplify the library code, but can be fixed later
   * @returns {BigNum}
   */
  min_fee(): BigNum;
}
/**
 */
declare export class TransactionHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {TransactionHash}
   */
  static from_bech32(bech_str: string): TransactionHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionHash}
   */
  static from_bytes(bytes: Uint8Array): TransactionHash;
}
/**
 */
declare export class TransactionInput {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionInput}
   */
  static from_bytes(bytes: Uint8Array): TransactionInput;

  /**
   * @returns {TransactionHash}
   */
  transaction_id(): TransactionHash;

  /**
   * @returns {number}
   */
  index(): number;

  /**
   * @param {TransactionHash} transaction_id
   * @param {number} index
   * @returns {TransactionInput}
   */
  static new(transaction_id: TransactionHash, index: number): TransactionInput;
}
/**
 */
declare export class TransactionInputs {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionInputs}
   */
  static from_bytes(bytes: Uint8Array): TransactionInputs;

  /**
   * @returns {TransactionInputs}
   */
  static new(): TransactionInputs;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionInput}
   */
  get(index: number): TransactionInput;

  /**
   * @param {TransactionInput} elem
   */
  add(elem: TransactionInput): void;
}
/**
 */
declare export class TransactionMetadatum {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionMetadatum}
   */
  static from_bytes(bytes: Uint8Array): TransactionMetadatum;

  /**
   * @param {MetadataMap} map
   * @returns {TransactionMetadatum}
   */
  static new_map(map: MetadataMap): TransactionMetadatum;

  /**
   * @param {MetadataList} list
   * @returns {TransactionMetadatum}
   */
  static new_list(list: MetadataList): TransactionMetadatum;

  /**
   * @param {Int} int
   * @returns {TransactionMetadatum}
   */
  static new_int(int: Int): TransactionMetadatum;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionMetadatum}
   */
  static new_bytes(bytes: Uint8Array): TransactionMetadatum;

  /**
   * @param {string} text
   * @returns {TransactionMetadatum}
   */
  static new_text(text: string): TransactionMetadatum;

  /**
   * @returns {number}
   */
  kind(): number;

  /**
   * @returns {MetadataMap}
   */
  as_map(): MetadataMap;

  /**
   * @returns {MetadataList}
   */
  as_list(): MetadataList;

  /**
   * @returns {Int}
   */
  as_int(): Int;

  /**
   * @returns {Uint8Array}
   */
  as_bytes(): Uint8Array;

  /**
   * @returns {string}
   */
  as_text(): string;
}
/**
 */
declare export class TransactionMetadatumLabels {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionMetadatumLabels}
   */
  static from_bytes(bytes: Uint8Array): TransactionMetadatumLabels;

  /**
   * @returns {TransactionMetadatumLabels}
   */
  static new(): TransactionMetadatumLabels;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {BigNum}
   */
  get(index: number): BigNum;

  /**
   * @param {BigNum} elem
   */
  add(elem: BigNum): void;
}
/**
 */
declare export class TransactionOutput {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionOutput}
   */
  static from_bytes(bytes: Uint8Array): TransactionOutput;

  /**
   * @returns {Address}
   */
  address(): Address;

  /**
   * @returns {Value}
   */
  amount(): Value;

  /**
   * @returns {DataHash | void}
   */
  data_hash(): DataHash | void;

  /**
   * @param {DataHash} data_hash
   */
  set_data_hash(data_hash: DataHash): void;

  /**
   * @param {Address} address
   * @param {Value} amount
   * @returns {TransactionOutput}
   */
  static new(address: Address, amount: Value): TransactionOutput;
}
/**
 */
declare export class TransactionOutputs {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionOutputs}
   */
  static from_bytes(bytes: Uint8Array): TransactionOutputs;

  /**
   * @returns {TransactionOutputs}
   */
  static new(): TransactionOutputs;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionOutput}
   */
  get(index: number): TransactionOutput;

  /**
   * @param {TransactionOutput} elem
   */
  add(elem: TransactionOutput): void;
}
/**
 */
declare export class TransactionUnspentOutput {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionUnspentOutput}
   */
  static from_bytes(bytes: Uint8Array): TransactionUnspentOutput;

  /**
   * @param {TransactionInput} input
   * @param {TransactionOutput} output
   * @returns {TransactionUnspentOutput}
   */
  static new(
    input: TransactionInput,
    output: TransactionOutput,
  ): TransactionUnspentOutput;

  /**
   * @returns {TransactionInput}
   */
  input(): TransactionInput;

  /**
   * @returns {TransactionOutput}
   */
  output(): TransactionOutput;
}
/**
 */
declare export class TransactionWitnessSet {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionWitnessSet}
   */
  static from_bytes(bytes: Uint8Array): TransactionWitnessSet;

  /**
   * @param {Vkeywitnesses} vkeys
   */
  set_vkeys(vkeys: Vkeywitnesses): void;

  /**
   * @returns {Vkeywitnesses | void}
   */
  vkeys(): Vkeywitnesses | void;

  /**
   * @param {NativeScripts} native_scripts
   */
  set_native_scripts(native_scripts: NativeScripts): void;

  /**
   * @returns {NativeScripts | void}
   */
  native_scripts(): NativeScripts | void;

  /**
   * @param {BootstrapWitnesses} bootstraps
   */
  set_bootstraps(bootstraps: BootstrapWitnesses): void;

  /**
   * @returns {BootstrapWitnesses | void}
   */
  bootstraps(): BootstrapWitnesses | void;

  /**
   * @param {PlutusScripts} plutus_scripts
   */
  set_plutus_scripts(plutus_scripts: PlutusScripts): void;

  /**
   * @returns {PlutusScripts | void}
   */
  plutus_scripts(): PlutusScripts | void;

  /**
   * @param {PlutusList} plutus_data
   */
  set_plutus_data(plutus_data: PlutusList): void;

  /**
   * @returns {PlutusList | void}
   */
  plutus_data(): PlutusList | void;

  /**
   * @param {Redeemers} redeemers
   */
  set_redeemers(redeemers: Redeemers): void;

  /**
   * @returns {Redeemers | void}
   */
  redeemers(): Redeemers | void;

  /**
   * @returns {TransactionWitnessSet}
   */
  static new(): TransactionWitnessSet;
}
/**
 */
declare export class TransactionWitnessSets {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {TransactionWitnessSets}
   */
  static from_bytes(bytes: Uint8Array): TransactionWitnessSets;

  /**
   * @returns {TransactionWitnessSets}
   */
  static new(): TransactionWitnessSets;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {TransactionWitnessSet}
   */
  get(index: number): TransactionWitnessSet;

  /**
   * @param {TransactionWitnessSet} elem
   */
  add(elem: TransactionWitnessSet): void;
}
/**
 */
declare export class URL {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {URL}
   */
  static from_bytes(bytes: Uint8Array): URL;

  /**
   * @param {string} url
   * @returns {URL}
   */
  static new(url: string): URL;

  /**
   * @returns {string}
   */
  url(): string;
}
/**
 */
declare export class UnitInterval {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {UnitInterval}
   */
  static from_bytes(bytes: Uint8Array): UnitInterval;

  /**
   * @returns {BigNum}
   */
  numerator(): BigNum;

  /**
   * @returns {BigNum}
   */
  denominator(): BigNum;

  /**
   * @param {BigNum} numerator
   * @param {BigNum} denominator
   * @returns {UnitInterval}
   */
  static new(numerator: BigNum, denominator: BigNum): UnitInterval;
}
/**
 */
declare export class Update {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Update}
   */
  static from_bytes(bytes: Uint8Array): Update;

  /**
   * @returns {ProposedProtocolParameterUpdates}
   */
  proposed_protocol_parameter_updates(): ProposedProtocolParameterUpdates;

  /**
   * @returns {number}
   */
  epoch(): number;

  /**
   * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates
   * @param {number} epoch
   * @returns {Update}
   */
  static new(
    proposed_protocol_parameter_updates: ProposedProtocolParameterUpdates,
    epoch: number,
  ): Update;
}
/**
 */
declare export class VRFCert {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {VRFCert}
   */
  static from_bytes(bytes: Uint8Array): VRFCert;

  /**
   * @returns {Uint8Array}
   */
  output(): Uint8Array;

  /**
   * @returns {Uint8Array}
   */
  proof(): Uint8Array;

  /**
   * @param {Uint8Array} output
   * @param {Uint8Array} proof
   * @returns {VRFCert}
   */
  static new(output: Uint8Array, proof: Uint8Array): VRFCert;
}
/**
 */
declare export class VRFKeyHash {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {VRFKeyHash}
   */
  static from_bech32(bech_str: string): VRFKeyHash;

  /**
   * @param {Uint8Array} bytes
   * @returns {VRFKeyHash}
   */
  static from_bytes(bytes: Uint8Array): VRFKeyHash;
}
/**
 */
declare export class VRFVKey {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {string} prefix
   * @returns {string}
   */
  to_bech32(prefix: string): string;

  /**
   * @param {string} bech_str
   * @returns {VRFVKey}
   */
  static from_bech32(bech_str: string): VRFVKey;

  /**
   * @param {Uint8Array} bytes
   * @returns {VRFVKey}
   */
  static from_bytes(bytes: Uint8Array): VRFVKey;
}
/**
 */
declare export class Value {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Value}
   */
  static from_bytes(bytes: Uint8Array): Value;

  /**
   * @param {BigNum} coin
   * @returns {Value}
   */
  static new(coin: BigNum): Value;

  /**
   * @returns {Value}
   */
  static zero(): Value;

  /**
   * @returns {boolean}
   */
  is_zero(): boolean;

  /**
   * @returns {BigNum}
   */
  coin(): BigNum;

  /**
   * @param {BigNum} coin
   */
  set_coin(coin: BigNum): void;

  /**
   * @returns {MultiAsset | void}
   */
  multiasset(): MultiAsset | void;

  /**
   * @param {MultiAsset} multiasset
   */
  set_multiasset(multiasset: MultiAsset): void;

  /**
   * @param {Value} rhs
   * @returns {Value}
   */
  checked_add(rhs: Value): Value;

  /**
   * @param {Value} rhs_value
   * @returns {Value}
   */
  checked_sub(rhs_value: Value): Value;

  /**
   * @param {Value} rhs_value
   * @returns {Value}
   */
  clamped_sub(rhs_value: Value): Value;

  /**
   * note: values are only partially comparable
   * @param {Value} rhs_value
   * @returns {number | void}
   */
  compare(rhs_value: Value): number | void;
}
/**
 */
declare export class Vkey {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Vkey}
   */
  static from_bytes(bytes: Uint8Array): Vkey;

  /**
   * @param {PublicKey} pk
   * @returns {Vkey}
   */
  static new(pk: PublicKey): Vkey;

  /**
   * @returns {PublicKey}
   */
  public_key(): PublicKey;
}
/**
 */
declare export class Vkeys {
  free(): void;

  /**
   * @returns {Vkeys}
   */
  static new(): Vkeys;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Vkey}
   */
  get(index: number): Vkey;

  /**
   * @param {Vkey} elem
   */
  add(elem: Vkey): void;
}
/**
 */
declare export class Vkeywitness {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Vkeywitness}
   */
  static from_bytes(bytes: Uint8Array): Vkeywitness;

  /**
   * @param {Vkey} vkey
   * @param {Ed25519Signature} signature
   * @returns {Vkeywitness}
   */
  static new(vkey: Vkey, signature: Ed25519Signature): Vkeywitness;

  /**
   * @returns {Vkey}
   */
  vkey(): Vkey;

  /**
   * @returns {Ed25519Signature}
   */
  signature(): Ed25519Signature;
}
/**
 */
declare export class Vkeywitnesses {
  free(): void;

  /**
   * @returns {Vkeywitnesses}
   */
  static new(): Vkeywitnesses;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {number} index
   * @returns {Vkeywitness}
   */
  get(index: number): Vkeywitness;

  /**
   * @param {Vkeywitness} elem
   */
  add(elem: Vkeywitness): void;
}
/**
 */
declare export class Withdrawals {
  free(): void;

  /**
   * @returns {Uint8Array}
   */
  to_bytes(): Uint8Array;

  /**
   * @param {Uint8Array} bytes
   * @returns {Withdrawals}
   */
  static from_bytes(bytes: Uint8Array): Withdrawals;

  /**
   * @returns {Withdrawals}
   */
  static new(): Withdrawals;

  /**
   * @returns {number}
   */
  len(): number;

  /**
   * @param {RewardAddress} key
   * @param {BigNum} value
   * @returns {BigNum | void}
   */
  insert(key: RewardAddress, value: BigNum): BigNum | void;

  /**
   * @param {RewardAddress} key
   * @returns {BigNum | void}
   */
  get(key: RewardAddress): BigNum | void;

  /**
   * @returns {RewardAddresses}
   */
  keys(): RewardAddresses;
}
export type InitInput =
  | RequestInfo
  | URL
  | Response
  | BufferSource
  | WebAssembly.Module;
export interface InitOutput {
  +memory: WebAssembly.Memory;
  +__wbg_unitinterval_free: (a: number) => void;
  +unitinterval_to_bytes: (a: number, b: number) => void;
  +unitinterval_from_bytes: (a: number, b: number) => number;
  +unitinterval_numerator: (a: number) => number;
  +unitinterval_denominator: (a: number) => number;
  +unitinterval_new: (a: number, b: number) => number;
  +__wbg_transaction_free: (a: number) => void;
  +transaction_to_bytes: (a: number, b: number) => void;
  +transaction_from_bytes: (a: number, b: number) => number;
  +transaction_body: (a: number) => number;
  +transaction_witness_set: (a: number) => number;
  +transaction_auxiliary_data: (a: number) => number;
  +transaction_new: (a: number, b: number, c: number) => number;
  +__wbg_transactioninputs_free: (a: number) => void;
  +transactioninputs_to_bytes: (a: number, b: number) => void;
  +transactioninputs_from_bytes: (a: number, b: number) => number;
  +transactioninputs_new: () => number;
  +transactioninputs_len: (a: number) => number;
  +transactioninputs_get: (a: number, b: number) => number;
  +transactioninputs_add: (a: number, b: number) => void;
  +__wbg_transactionoutputs_free: (a: number) => void;
  +transactionoutputs_to_bytes: (a: number, b: number) => void;
  +transactionoutputs_from_bytes: (a: number, b: number) => number;
  +transactionoutputs_new: () => number;
  +transactionoutputs_len: (a: number) => number;
  +transactionoutputs_get: (a: number, b: number) => number;
  +transactionoutputs_add: (a: number, b: number) => void;
  +__wbg_certificates_free: (a: number) => void;
  +certificates_to_bytes: (a: number, b: number) => void;
  +certificates_from_bytes: (a: number, b: number) => number;
  +certificates_new: () => number;
  +certificates_len: (a: number) => number;
  +certificates_get: (a: number, b: number) => number;
  +certificates_add: (a: number, b: number) => void;
  +__wbg_transactionbody_free: (a: number) => void;
  +transactionbody_to_bytes: (a: number, b: number) => void;
  +transactionbody_from_bytes: (a: number, b: number) => number;
  +transactionbody_inputs: (a: number) => number;
  +transactionbody_outputs: (a: number) => number;
  +transactionbody_fee: (a: number) => number;
  +transactionbody_ttl: (a: number, b: number) => void;
  +transactionbody_set_certs: (a: number, b: number) => void;
  +transactionbody_certs: (a: number) => number;
  +transactionbody_set_withdrawals: (a: number, b: number) => void;
  +transactionbody_withdrawals: (a: number) => number;
  +transactionbody_set_update: (a: number, b: number) => void;
  +transactionbody_update: (a: number) => number;
  +transactionbody_set_auxiliary_data_hash: (a: number, b: number) => void;
  +transactionbody_auxiliary_data_hash: (a: number) => number;
  +transactionbody_set_validity_start_interval: (a: number, b: number) => void;
  +transactionbody_validity_start_interval: (a: number, b: number) => void;
  +transactionbody_set_mint: (a: number, b: number) => void;
  +transactionbody_multiassets: (a: number) => number;
  +transactionbody_set_script_data_hash: (a: number, b: number) => void;
  +transactionbody_script_data_hash: (a: number) => number;
  +transactionbody_set_collateral: (a: number, b: number) => void;
  +transactionbody_collateral: (a: number) => number;
  +transactionbody_set_required_signers: (a: number, b: number) => void;
  +transactionbody_required_signers: (a: number) => number;
  +transactionbody_set_network_id: (a: number, b: number) => void;
  +transactionbody_network_id: (a: number) => number;
  +transactionbody_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
  ) => number;
  +__wbg_transactioninput_free: (a: number) => void;
  +transactioninput_to_bytes: (a: number, b: number) => void;
  +transactioninput_from_bytes: (a: number, b: number) => number;
  +transactioninput_transaction_id: (a: number) => number;
  +transactioninput_index: (a: number) => number;
  +transactioninput_new: (a: number, b: number) => number;
  +__wbg_transactionoutput_free: (a: number) => void;
  +transactionoutput_to_bytes: (a: number, b: number) => void;
  +transactionoutput_from_bytes: (a: number, b: number) => number;
  +transactionoutput_address: (a: number) => number;
  +transactionoutput_amount: (a: number) => number;
  +transactionoutput_data_hash: (a: number) => number;
  +transactionoutput_set_data_hash: (a: number, b: number) => void;
  +transactionoutput_new: (a: number, b: number) => number;
  +__wbg_stakeregistration_free: (a: number) => void;
  +stakeregistration_to_bytes: (a: number, b: number) => void;
  +stakeregistration_from_bytes: (a: number, b: number) => number;
  +stakeregistration_stake_credential: (a: number) => number;
  +stakeregistration_new: (a: number) => number;
  +__wbg_stakederegistration_free: (a: number) => void;
  +stakederegistration_to_bytes: (a: number, b: number) => void;
  +stakederegistration_from_bytes: (a: number, b: number) => number;
  +stakederegistration_stake_credential: (a: number) => number;
  +stakederegistration_new: (a: number) => number;
  +__wbg_stakedelegation_free: (a: number) => void;
  +stakedelegation_to_bytes: (a: number, b: number) => void;
  +stakedelegation_from_bytes: (a: number, b: number) => number;
  +stakedelegation_stake_credential: (a: number) => number;
  +stakedelegation_pool_keyhash: (a: number) => number;
  +stakedelegation_new: (a: number, b: number) => number;
  +__wbg_ed25519keyhashes_free: (a: number) => void;
  +ed25519keyhashes_to_bytes: (a: number, b: number) => void;
  +ed25519keyhashes_from_bytes: (a: number, b: number) => number;
  +ed25519keyhashes_new: () => number;
  +ed25519keyhashes_len: (a: number) => number;
  +ed25519keyhashes_get: (a: number, b: number) => number;
  +ed25519keyhashes_add: (a: number, b: number) => void;
  +__wbg_relays_free: (a: number) => void;
  +relays_to_bytes: (a: number, b: number) => void;
  +relays_from_bytes: (a: number, b: number) => number;
  +relays_new: () => number;
  +relays_len: (a: number) => number;
  +relays_get: (a: number, b: number) => number;
  +relays_add: (a: number, b: number) => void;
  +__wbg_poolparams_free: (a: number) => void;
  +poolparams_to_bytes: (a: number, b: number) => void;
  +poolparams_from_bytes: (a: number, b: number) => number;
  +poolparams_operator: (a: number) => number;
  +poolparams_vrf_keyhash: (a: number) => number;
  +poolparams_pledge: (a: number) => number;
  +poolparams_cost: (a: number) => number;
  +poolparams_margin: (a: number) => number;
  +poolparams_reward_account: (a: number) => number;
  +poolparams_pool_owners: (a: number) => number;
  +poolparams_relays: (a: number) => number;
  +poolparams_pool_metadata: (a: number) => number;
  +poolparams_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
    g: number,
    h: number,
    i: number,
  ) => number;
  +__wbg_poolregistration_free: (a: number) => void;
  +poolregistration_to_bytes: (a: number, b: number) => void;
  +poolregistration_from_bytes: (a: number, b: number) => number;
  +poolregistration_pool_params: (a: number) => number;
  +poolregistration_new: (a: number) => number;
  +__wbg_poolretirement_free: (a: number) => void;
  +poolretirement_to_bytes: (a: number, b: number) => void;
  +poolretirement_from_bytes: (a: number, b: number) => number;
  +poolretirement_pool_keyhash: (a: number) => number;
  +poolretirement_epoch: (a: number) => number;
  +poolretirement_new: (a: number, b: number) => number;
  +__wbg_genesiskeydelegation_free: (a: number) => void;
  +genesiskeydelegation_to_bytes: (a: number, b: number) => void;
  +genesiskeydelegation_from_bytes: (a: number, b: number) => number;
  +genesiskeydelegation_genesishash: (a: number) => number;
  +genesiskeydelegation_genesis_delegate_hash: (a: number) => number;
  +genesiskeydelegation_vrf_keyhash: (a: number) => number;
  +genesiskeydelegation_new: (a: number, b: number, c: number) => number;
  +__wbg_moveinstantaneousrewardscert_free: (a: number) => void;
  +moveinstantaneousrewardscert_to_bytes: (a: number, b: number) => void;
  +moveinstantaneousrewardscert_from_bytes: (a: number, b: number) => number;
  +moveinstantaneousrewardscert_move_instantaneous_reward: (
    a: number,
  ) => number;
  +moveinstantaneousrewardscert_new: (a: number) => number;
  +__wbg_certificate_free: (a: number) => void;
  +certificate_to_bytes: (a: number, b: number) => void;
  +certificate_from_bytes: (a: number, b: number) => number;
  +certificate_new_stake_registration: (a: number) => number;
  +certificate_new_stake_deregistration: (a: number) => number;
  +certificate_new_stake_delegation: (a: number) => number;
  +certificate_new_pool_registration: (a: number) => number;
  +certificate_new_pool_retirement: (a: number) => number;
  +certificate_new_genesis_key_delegation: (a: number) => number;
  +certificate_new_move_instantaneous_rewards_cert: (a: number) => number;
  +certificate_kind: (a: number) => number;
  +certificate_as_stake_registration: (a: number) => number;
  +certificate_as_stake_deregistration: (a: number) => number;
  +certificate_as_stake_delegation: (a: number) => number;
  +certificate_as_pool_registration: (a: number) => number;
  +certificate_as_pool_retirement: (a: number) => number;
  +certificate_as_genesis_key_delegation: (a: number) => number;
  +certificate_as_move_instantaneous_rewards_cert: (a: number) => number;
  +__wbg_mirtostakecredentials_free: (a: number) => void;
  +mirtostakecredentials_to_bytes: (a: number, b: number) => void;
  +mirtostakecredentials_from_bytes: (a: number, b: number) => number;
  +mirtostakecredentials_new: () => number;
  +mirtostakecredentials_len: (a: number) => number;
  +mirtostakecredentials_insert: (a: number, b: number, c: number) => number;
  +mirtostakecredentials_get: (a: number, b: number) => number;
  +mirtostakecredentials_keys: (a: number) => number;
  +__wbg_moveinstantaneousreward_free: (a: number) => void;
  +moveinstantaneousreward_to_bytes: (a: number, b: number) => void;
  +moveinstantaneousreward_from_bytes: (a: number, b: number) => number;
  +moveinstantaneousreward_new_to_other_pot: (a: number, b: number) => number;
  +moveinstantaneousreward_new_to_stake_creds: (a: number, b: number) => number;
  +moveinstantaneousreward_pot: (a: number) => number;
  +moveinstantaneousreward_kind: (a: number) => number;
  +moveinstantaneousreward_as_to_other_pot: (a: number) => number;
  +moveinstantaneousreward_as_to_stake_creds: (a: number) => number;
  +__wbg_ipv4_free: (a: number) => void;
  +ipv4_to_bytes: (a: number, b: number) => void;
  +ipv4_from_bytes: (a: number, b: number) => number;
  +ipv4_new: (a: number, b: number) => number;
  +ipv4_ip: (a: number, b: number) => void;
  +__wbg_ipv6_free: (a: number) => void;
  +ipv6_to_bytes: (a: number, b: number) => void;
  +ipv6_from_bytes: (a: number, b: number) => number;
  +ipv6_new: (a: number, b: number) => number;
  +ipv6_ip: (a: number, b: number) => void;
  +__wbg_url_free: (a: number) => void;
  +url_to_bytes: (a: number, b: number) => void;
  +url_from_bytes: (a: number, b: number) => number;
  +url_new: (a: number, b: number) => number;
  +url_url: (a: number, b: number) => void;
  +__wbg_dnsrecordaoraaaa_free: (a: number) => void;
  +dnsrecordaoraaaa_to_bytes: (a: number, b: number) => void;
  +dnsrecordaoraaaa_from_bytes: (a: number, b: number) => number;
  +dnsrecordaoraaaa_new: (a: number, b: number) => number;
  +dnsrecordaoraaaa_record: (a: number, b: number) => void;
  +__wbg_dnsrecordsrv_free: (a: number) => void;
  +dnsrecordsrv_to_bytes: (a: number, b: number) => void;
  +dnsrecordsrv_from_bytes: (a: number, b: number) => number;
  +dnsrecordsrv_new: (a: number, b: number) => number;
  +dnsrecordsrv_record: (a: number, b: number) => void;
  +__wbg_singlehostaddr_free: (a: number) => void;
  +singlehostaddr_to_bytes: (a: number, b: number) => void;
  +singlehostaddr_from_bytes: (a: number, b: number) => number;
  +singlehostaddr_port: (a: number) => number;
  +singlehostaddr_ipv4: (a: number) => number;
  +singlehostaddr_ipv6: (a: number) => number;
  +singlehostaddr_new: (a: number, b: number, c: number) => number;
  +__wbg_singlehostname_free: (a: number) => void;
  +singlehostname_to_bytes: (a: number, b: number) => void;
  +singlehostname_from_bytes: (a: number, b: number) => number;
  +singlehostname_port: (a: number) => number;
  +singlehostname_dns_name: (a: number) => number;
  +singlehostname_new: (a: number, b: number) => number;
  +__wbg_multihostname_free: (a: number) => void;
  +multihostname_to_bytes: (a: number, b: number) => void;
  +multihostname_from_bytes: (a: number, b: number) => number;
  +multihostname_dns_name: (a: number) => number;
  +multihostname_new: (a: number) => number;
  +__wbg_relay_free: (a: number) => void;
  +relay_to_bytes: (a: number, b: number) => void;
  +relay_from_bytes: (a: number, b: number) => number;
  +relay_new_single_host_addr: (a: number) => number;
  +relay_new_single_host_name: (a: number) => number;
  +relay_new_multi_host_name: (a: number) => number;
  +relay_kind: (a: number) => number;
  +relay_as_single_host_addr: (a: number) => number;
  +relay_as_single_host_name: (a: number) => number;
  +relay_as_multi_host_name: (a: number) => number;
  +__wbg_poolmetadata_free: (a: number) => void;
  +poolmetadata_to_bytes: (a: number, b: number) => void;
  +poolmetadata_from_bytes: (a: number, b: number) => number;
  +poolmetadata_url: (a: number) => number;
  +poolmetadata_pool_metadata_hash: (a: number) => number;
  +poolmetadata_new: (a: number, b: number) => number;
  +__wbg_stakecredentials_free: (a: number) => void;
  +stakecredentials_to_bytes: (a: number, b: number) => void;
  +stakecredentials_from_bytes: (a: number, b: number) => number;
  +stakecredentials_new: () => number;
  +stakecredentials_len: (a: number) => number;
  +stakecredentials_get: (a: number, b: number) => number;
  +stakecredentials_add: (a: number, b: number) => void;
  +__wbg_rewardaddresses_free: (a: number) => void;
  +rewardaddresses_to_bytes: (a: number, b: number) => void;
  +rewardaddresses_from_bytes: (a: number, b: number) => number;
  +rewardaddresses_new: () => number;
  +rewardaddresses_len: (a: number) => number;
  +rewardaddresses_get: (a: number, b: number) => number;
  +rewardaddresses_add: (a: number, b: number) => void;
  +__wbg_withdrawals_free: (a: number) => void;
  +withdrawals_to_bytes: (a: number, b: number) => void;
  +withdrawals_from_bytes: (a: number, b: number) => number;
  +withdrawals_new: () => number;
  +withdrawals_len: (a: number) => number;
  +withdrawals_insert: (a: number, b: number, c: number) => number;
  +withdrawals_get: (a: number, b: number) => number;
  +withdrawals_keys: (a: number) => number;
  +__wbg_transactionwitnessset_free: (a: number) => void;
  +transactionwitnessset_to_bytes: (a: number, b: number) => void;
  +transactionwitnessset_from_bytes: (a: number, b: number) => number;
  +transactionwitnessset_set_vkeys: (a: number, b: number) => void;
  +transactionwitnessset_vkeys: (a: number) => number;
  +transactionwitnessset_set_native_scripts: (a: number, b: number) => void;
  +transactionwitnessset_native_scripts: (a: number) => number;
  +transactionwitnessset_set_bootstraps: (a: number, b: number) => void;
  +transactionwitnessset_bootstraps: (a: number) => number;
  +transactionwitnessset_set_plutus_scripts: (a: number, b: number) => void;
  +transactionwitnessset_plutus_scripts: (a: number) => number;
  +transactionwitnessset_set_plutus_data: (a: number, b: number) => void;
  +transactionwitnessset_plutus_data: (a: number) => number;
  +transactionwitnessset_set_redeemers: (a: number, b: number) => void;
  +transactionwitnessset_redeemers: (a: number) => number;
  +transactionwitnessset_new: () => number;
  +__wbg_scriptpubkey_free: (a: number) => void;
  +scriptpubkey_to_bytes: (a: number, b: number) => void;
  +scriptpubkey_from_bytes: (a: number, b: number) => number;
  +scriptpubkey_addr_keyhash: (a: number) => number;
  +scriptpubkey_new: (a: number) => number;
  +__wbg_scriptall_free: (a: number) => void;
  +scriptall_to_bytes: (a: number, b: number) => void;
  +scriptall_from_bytes: (a: number, b: number) => number;
  +scriptall_native_scripts: (a: number) => number;
  +scriptall_new: (a: number) => number;
  +__wbg_scriptany_free: (a: number) => void;
  +scriptany_to_bytes: (a: number, b: number) => void;
  +scriptany_from_bytes: (a: number, b: number) => number;
  +scriptany_native_scripts: (a: number) => number;
  +scriptany_new: (a: number) => number;
  +__wbg_scriptnofk_free: (a: number) => void;
  +scriptnofk_to_bytes: (a: number, b: number) => void;
  +scriptnofk_from_bytes: (a: number, b: number) => number;
  +scriptnofk_n: (a: number) => number;
  +scriptnofk_native_scripts: (a: number) => number;
  +scriptnofk_new: (a: number, b: number) => number;
  +__wbg_timelockstart_free: (a: number) => void;
  +timelockstart_to_bytes: (a: number, b: number) => void;
  +timelockstart_from_bytes: (a: number, b: number) => number;
  +timelockstart_slot: (a: number) => number;
  +timelockstart_new: (a: number) => number;
  +__wbg_timelockexpiry_free: (a: number) => void;
  +timelockexpiry_to_bytes: (a: number, b: number) => void;
  +timelockexpiry_from_bytes: (a: number, b: number) => number;
  +timelockexpiry_slot: (a: number) => number;
  +timelockexpiry_new: (a: number) => number;
  +__wbg_nativescript_free: (a: number) => void;
  +nativescript_to_bytes: (a: number, b: number) => void;
  +nativescript_from_bytes: (a: number, b: number) => number;
  +nativescript_hash: (a: number, b: number) => number;
  +nativescript_new_script_pubkey: (a: number) => number;
  +nativescript_new_script_all: (a: number) => number;
  +nativescript_new_script_any: (a: number) => number;
  +nativescript_new_script_n_of_k: (a: number) => number;
  +nativescript_new_timelock_start: (a: number) => number;
  +nativescript_new_timelock_expiry: (a: number) => number;
  +nativescript_kind: (a: number) => number;
  +nativescript_as_script_pubkey: (a: number) => number;
  +nativescript_as_script_all: (a: number) => number;
  +nativescript_as_script_any: (a: number) => number;
  +nativescript_as_script_n_of_k: (a: number) => number;
  +nativescript_as_timelock_start: (a: number) => number;
  +nativescript_as_timelock_expiry: (a: number) => number;
  +__wbg_nativescripts_free: (a: number) => void;
  +nativescripts_new: () => number;
  +nativescripts_len: (a: number) => number;
  +nativescripts_get: (a: number, b: number) => number;
  +nativescripts_add: (a: number, b: number) => void;
  +__wbg_update_free: (a: number) => void;
  +update_to_bytes: (a: number, b: number) => void;
  +update_from_bytes: (a: number, b: number) => number;
  +update_proposed_protocol_parameter_updates: (a: number) => number;
  +update_epoch: (a: number) => number;
  +update_new: (a: number, b: number) => number;
  +__wbg_genesishashes_free: (a: number) => void;
  +genesishashes_to_bytes: (a: number, b: number) => void;
  +genesishashes_from_bytes: (a: number, b: number) => number;
  +genesishashes_new: () => number;
  +genesishashes_len: (a: number) => number;
  +genesishashes_get: (a: number, b: number) => number;
  +genesishashes_add: (a: number, b: number) => void;
  +__wbg_scripthashes_free: (a: number) => void;
  +scripthashes_to_bytes: (a: number, b: number) => void;
  +scripthashes_from_bytes: (a: number, b: number) => number;
  +scripthashes_new: () => number;
  +scripthashes_len: (a: number) => number;
  +scripthashes_get: (a: number, b: number) => number;
  +scripthashes_add: (a: number, b: number) => void;
  +__wbg_proposedprotocolparameterupdates_free: (a: number) => void;
  +proposedprotocolparameterupdates_to_bytes: (a: number, b: number) => void;
  +proposedprotocolparameterupdates_from_bytes: (
    a: number,
    b: number,
  ) => number;
  +proposedprotocolparameterupdates_new: () => number;
  +proposedprotocolparameterupdates_len: (a: number) => number;
  +proposedprotocolparameterupdates_insert: (
    a: number,
    b: number,
    c: number,
  ) => number;
  +proposedprotocolparameterupdates_get: (a: number, b: number) => number;
  +proposedprotocolparameterupdates_keys: (a: number) => number;
  +__wbg_protocolversion_free: (a: number) => void;
  +protocolversion_to_bytes: (a: number, b: number) => void;
  +protocolversion_from_bytes: (a: number, b: number) => number;
  +protocolversion_major: (a: number) => number;
  +protocolversion_minor: (a: number) => number;
  +protocolversion_new: (a: number, b: number) => number;
  +__wbg_protocolversions_free: (a: number) => void;
  +protocolversions_to_bytes: (a: number, b: number) => void;
  +protocolversions_from_bytes: (a: number, b: number) => number;
  +protocolversions_new: () => number;
  +protocolversions_len: (a: number) => number;
  +protocolversions_get: (a: number, b: number) => number;
  +protocolversions_add: (a: number, b: number) => void;
  +__wbg_protocolparamupdate_free: (a: number) => void;
  +protocolparamupdate_to_bytes: (a: number, b: number) => void;
  +protocolparamupdate_from_bytes: (a: number, b: number) => number;
  +protocolparamupdate_set_minfee_a: (a: number, b: number) => void;
  +protocolparamupdate_minfee_a: (a: number) => number;
  +protocolparamupdate_set_minfee_b: (a: number, b: number) => void;
  +protocolparamupdate_minfee_b: (a: number) => number;
  +protocolparamupdate_set_max_block_body_size: (a: number, b: number) => void;
  +protocolparamupdate_max_block_body_size: (a: number, b: number) => void;
  +protocolparamupdate_set_max_tx_size: (a: number, b: number) => void;
  +protocolparamupdate_max_tx_size: (a: number, b: number) => void;
  +protocolparamupdate_set_max_block_header_size: (
    a: number,
    b: number,
  ) => void;
  +protocolparamupdate_max_block_header_size: (a: number, b: number) => void;
  +protocolparamupdate_set_key_deposit: (a: number, b: number) => void;
  +protocolparamupdate_key_deposit: (a: number) => number;
  +protocolparamupdate_set_pool_deposit: (a: number, b: number) => void;
  +protocolparamupdate_pool_deposit: (a: number) => number;
  +protocolparamupdate_set_max_epoch: (a: number, b: number) => void;
  +protocolparamupdate_max_epoch: (a: number, b: number) => void;
  +protocolparamupdate_set_n_opt: (a: number, b: number) => void;
  +protocolparamupdate_n_opt: (a: number, b: number) => void;
  +protocolparamupdate_set_pool_pledge_influence: (
    a: number,
    b: number,
  ) => void;
  +protocolparamupdate_pool_pledge_influence: (a: number) => number;
  +protocolparamupdate_set_expansion_rate: (a: number, b: number) => void;
  +protocolparamupdate_expansion_rate: (a: number) => number;
  +protocolparamupdate_set_treasury_growth_rate: (a: number, b: number) => void;
  +protocolparamupdate_treasury_growth_rate: (a: number) => number;
  +protocolparamupdate_set_d: (a: number, b: number) => void;
  +protocolparamupdate_d: (a: number) => number;
  +protocolparamupdate_set_extra_entropy: (a: number, b: number) => void;
  +protocolparamupdate_extra_entropy: (a: number) => number;
  +protocolparamupdate_set_protocol_version: (a: number, b: number) => void;
  +protocolparamupdate_protocol_version: (a: number) => number;
  +protocolparamupdate_set_min_pool_cost: (a: number, b: number) => void;
  +protocolparamupdate_min_pool_cost: (a: number) => number;
  +protocolparamupdate_set_ada_per_utxo_byte: (a: number, b: number) => void;
  +protocolparamupdate_ada_per_utxo_byte: (a: number) => number;
  +protocolparamupdate_set_cost_models: (a: number, b: number) => void;
  +protocolparamupdate_cost_models: (a: number) => number;
  +protocolparamupdate_set_execution_costs: (a: number, b: number) => void;
  +protocolparamupdate_execution_costs: (a: number) => number;
  +protocolparamupdate_set_max_tx_ex_units: (a: number, b: number) => void;
  +protocolparamupdate_max_tx_ex_units: (a: number) => number;
  +protocolparamupdate_set_max_block_ex_units: (a: number, b: number) => void;
  +protocolparamupdate_max_block_ex_units: (a: number) => number;
  +protocolparamupdate_set_max_value_size: (a: number, b: number) => void;
  +protocolparamupdate_max_value_size: (a: number, b: number) => void;
  +protocolparamupdate_new: () => number;
  +__wbg_transactionbodies_free: (a: number) => void;
  +transactionbodies_to_bytes: (a: number, b: number) => void;
  +transactionbodies_from_bytes: (a: number, b: number) => number;
  +transactionbodies_new: () => number;
  +transactionbodies_len: (a: number) => number;
  +transactionbodies_get: (a: number, b: number) => number;
  +transactionbodies_add: (a: number, b: number) => void;
  +__wbg_transactionwitnesssets_free: (a: number) => void;
  +transactionwitnesssets_to_bytes: (a: number, b: number) => void;
  +transactionwitnesssets_from_bytes: (a: number, b: number) => number;
  +transactionwitnesssets_new: () => number;
  +transactionwitnesssets_len: (a: number) => number;
  +transactionwitnesssets_get: (a: number, b: number) => number;
  +transactionwitnesssets_add: (a: number, b: number) => void;
  +__wbg_auxiliarydataset_free: (a: number) => void;
  +auxiliarydataset_new: () => number;
  +auxiliarydataset_len: (a: number) => number;
  +auxiliarydataset_insert: (a: number, b: number, c: number) => number;
  +auxiliarydataset_get: (a: number, b: number) => number;
  +auxiliarydataset_indices: (a: number, b: number) => void;
  +__wbg_block_free: (a: number) => void;
  +block_to_bytes: (a: number, b: number) => void;
  +block_from_bytes: (a: number, b: number) => number;
  +block_header: (a: number) => number;
  +block_transaction_bodies: (a: number) => number;
  +block_transaction_witness_sets: (a: number) => number;
  +block_auxiliary_data_set: (a: number) => number;
  +block_invalid_transactions: (a: number, b: number) => void;
  +block_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
  ) => number;
  +__wbg_header_free: (a: number) => void;
  +header_to_bytes: (a: number, b: number) => void;
  +header_from_bytes: (a: number, b: number) => number;
  +header_header_body: (a: number) => number;
  +header_body_signature: (a: number) => number;
  +header_new: (a: number, b: number) => number;
  +__wbg_operationalcert_free: (a: number) => void;
  +operationalcert_to_bytes: (a: number, b: number) => void;
  +operationalcert_from_bytes: (a: number, b: number) => number;
  +operationalcert_hot_vkey: (a: number) => number;
  +operationalcert_sequence_number: (a: number) => number;
  +operationalcert_kes_period: (a: number) => number;
  +operationalcert_sigma: (a: number) => number;
  +operationalcert_new: (a: number, b: number, c: number, d: number) => number;
  +__wbg_headerbody_free: (a: number) => void;
  +headerbody_to_bytes: (a: number, b: number) => void;
  +headerbody_from_bytes: (a: number, b: number) => number;
  +headerbody_block_number: (a: number) => number;
  +headerbody_slot: (a: number) => number;
  +headerbody_prev_hash: (a: number) => number;
  +headerbody_issuer_vkey: (a: number) => number;
  +headerbody_vrf_vkey: (a: number) => number;
  +headerbody_nonce_vrf: (a: number) => number;
  +headerbody_leader_vrf: (a: number) => number;
  +headerbody_block_body_size: (a: number) => number;
  +headerbody_block_body_hash: (a: number) => number;
  +headerbody_operational_cert: (a: number) => number;
  +headerbody_protocol_version: (a: number) => number;
  +headerbody_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
    g: number,
    h: number,
    i: number,
    j: number,
    k: number,
  ) => number;
  +__wbg_assetname_free: (a: number) => void;
  +assetname_to_bytes: (a: number, b: number) => void;
  +assetname_from_bytes: (a: number, b: number) => number;
  +assetname_new: (a: number, b: number) => number;
  +assetname_name: (a: number, b: number) => void;
  +__wbg_assetnames_free: (a: number) => void;
  +assetnames_to_bytes: (a: number, b: number) => void;
  +assetnames_from_bytes: (a: number, b: number) => number;
  +assetnames_new: () => number;
  +assetnames_len: (a: number) => number;
  +assetnames_get: (a: number, b: number) => number;
  +assetnames_add: (a: number, b: number) => void;
  +__wbg_assets_free: (a: number) => void;
  +assets_to_bytes: (a: number, b: number) => void;
  +assets_from_bytes: (a: number, b: number) => number;
  +assets_new: () => number;
  +assets_len: (a: number) => number;
  +assets_insert: (a: number, b: number, c: number) => number;
  +assets_get: (a: number, b: number) => number;
  +assets_keys: (a: number) => number;
  +__wbg_multiasset_free: (a: number) => void;
  +multiasset_to_bytes: (a: number, b: number) => void;
  +multiasset_from_bytes: (a: number, b: number) => number;
  +multiasset_new: () => number;
  +multiasset_len: (a: number) => number;
  +multiasset_insert: (a: number, b: number, c: number) => number;
  +multiasset_get: (a: number, b: number) => number;
  +multiasset_keys: (a: number) => number;
  +multiasset_sub: (a: number, b: number) => number;
  +__wbg_mintassets_free: (a: number) => void;
  +mintassets_new: () => number;
  +mintassets_len: (a: number) => number;
  +mintassets_insert: (a: number, b: number, c: number) => number;
  +mintassets_get: (a: number, b: number) => number;
  +mintassets_keys: (a: number) => number;
  +__wbg_mint_free: (a: number) => void;
  +mint_to_bytes: (a: number, b: number) => void;
  +mint_from_bytes: (a: number, b: number) => number;
  +mint_new: () => number;
  +mint_len: (a: number) => number;
  +mint_insert: (a: number, b: number, c: number) => number;
  +mint_get: (a: number, b: number) => number;
  +mint_keys: (a: number) => number;
  +__wbg_networkid_free: (a: number) => void;
  +networkid_to_bytes: (a: number, b: number) => void;
  +networkid_from_bytes: (a: number, b: number) => number;
  +networkid_testnet: () => number;
  +networkid_mainnet: () => number;
  +networkid_kind: (a: number) => number;
  +__wbg_metadatamap_free: (a: number) => void;
  +metadatamap_to_bytes: (a: number, b: number) => void;
  +metadatamap_from_bytes: (a: number, b: number) => number;
  +metadatamap_new: () => number;
  +metadatamap_len: (a: number) => number;
  +metadatamap_insert: (a: number, b: number, c: number) => number;
  +metadatamap_insert_str: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => number;
  +metadatamap_insert_i32: (a: number, b: number, c: number) => number;
  +metadatamap_get: (a: number, b: number) => number;
  +metadatamap_get_str: (a: number, b: number, c: number) => number;
  +metadatamap_get_i32: (a: number, b: number) => number;
  +metadatamap_has: (a: number, b: number) => number;
  +metadatamap_keys: (a: number) => number;
  +__wbg_metadatalist_free: (a: number) => void;
  +metadatalist_to_bytes: (a: number, b: number) => void;
  +metadatalist_from_bytes: (a: number, b: number) => number;
  +metadatalist_new: () => number;
  +metadatalist_len: (a: number) => number;
  +metadatalist_get: (a: number, b: number) => number;
  +metadatalist_add: (a: number, b: number) => void;
  +__wbg_transactionmetadatum_free: (a: number) => void;
  +transactionmetadatum_to_bytes: (a: number, b: number) => void;
  +transactionmetadatum_from_bytes: (a: number, b: number) => number;
  +transactionmetadatum_new_map: (a: number) => number;
  +transactionmetadatum_new_list: (a: number) => number;
  +transactionmetadatum_new_int: (a: number) => number;
  +transactionmetadatum_new_bytes: (a: number, b: number) => number;
  +transactionmetadatum_new_text: (a: number, b: number) => number;
  +transactionmetadatum_kind: (a: number) => number;
  +transactionmetadatum_as_map: (a: number) => number;
  +transactionmetadatum_as_list: (a: number) => number;
  +transactionmetadatum_as_int: (a: number) => number;
  +transactionmetadatum_as_bytes: (a: number, b: number) => void;
  +transactionmetadatum_as_text: (a: number, b: number) => void;
  +__wbg_transactionmetadatumlabels_free: (a: number) => void;
  +transactionmetadatumlabels_to_bytes: (a: number, b: number) => void;
  +transactionmetadatumlabels_from_bytes: (a: number, b: number) => number;
  +transactionmetadatumlabels_new: () => number;
  +transactionmetadatumlabels_len: (a: number) => number;
  +transactionmetadatumlabels_get: (a: number, b: number) => number;
  +transactionmetadatumlabels_add: (a: number, b: number) => void;
  +__wbg_generaltransactionmetadata_free: (a: number) => void;
  +generaltransactionmetadata_to_bytes: (a: number, b: number) => void;
  +generaltransactionmetadata_from_bytes: (a: number, b: number) => number;
  +generaltransactionmetadata_new: () => number;
  +generaltransactionmetadata_len: (a: number) => number;
  +generaltransactionmetadata_insert: (
    a: number,
    b: number,
    c: number,
  ) => number;
  +generaltransactionmetadata_get: (a: number, b: number) => number;
  +generaltransactionmetadata_keys: (a: number) => number;
  +__wbg_auxiliarydata_free: (a: number) => void;
  +auxiliarydata_to_bytes: (a: number, b: number) => void;
  +auxiliarydata_from_bytes: (a: number, b: number) => number;
  +auxiliarydata_new: () => number;
  +auxiliarydata_metadata: (a: number) => number;
  +auxiliarydata_set_metadata: (a: number, b: number) => void;
  +auxiliarydata_native_scripts: (a: number) => number;
  +auxiliarydata_set_native_scripts: (a: number, b: number) => void;
  +auxiliarydata_plutus_scripts: (a: number) => number;
  +auxiliarydata_set_plutus_scripts: (a: number, b: number) => void;
  +encode_arbitrary_bytes_as_metadatum: (a: number, b: number) => number;
  +decode_arbitrary_bytes_from_metadatum: (a: number, b: number) => void;
  +encode_json_str_to_metadatum: (a: number, b: number, c: number) => number;
  +decode_metadatum_to_json_str: (a: number, b: number, c: number) => void;
  +__wbg_transactionunspentoutput_free: (a: number) => void;
  +transactionunspentoutput_to_bytes: (a: number, b: number) => void;
  +transactionunspentoutput_from_bytes: (a: number, b: number) => number;
  +transactionunspentoutput_new: (a: number, b: number) => number;
  +transactionunspentoutput_input: (a: number) => number;
  +transactionunspentoutput_output: (a: number) => number;
  +__wbg_bignum_free: (a: number) => void;
  +bignum_to_bytes: (a: number, b: number) => void;
  +bignum_from_bytes: (a: number, b: number) => number;
  +bignum_from_str: (a: number, b: number) => number;
  +bignum_to_str: (a: number, b: number) => void;
  +bignum_zero: () => number;
  +bignum_is_zero: (a: number) => number;
  +bignum_checked_mul: (a: number, b: number) => number;
  +bignum_checked_add: (a: number, b: number) => number;
  +bignum_checked_sub: (a: number, b: number) => number;
  +bignum_clamped_sub: (a: number, b: number) => number;
  +bignum_compare: (a: number, b: number) => number;
  +__wbg_value_free: (a: number) => void;
  +value_to_bytes: (a: number, b: number) => void;
  +value_from_bytes: (a: number, b: number) => number;
  +value_new: (a: number) => number;
  +value_zero: () => number;
  +value_is_zero: (a: number) => number;
  +value_coin: (a: number) => number;
  +value_set_coin: (a: number, b: number) => void;
  +value_multiasset: (a: number) => number;
  +value_set_multiasset: (a: number, b: number) => void;
  +value_checked_add: (a: number, b: number) => number;
  +value_checked_sub: (a: number, b: number) => number;
  +value_clamped_sub: (a: number, b: number) => number;
  +value_compare: (a: number, b: number) => number;
  +__wbg_int_free: (a: number) => void;
  +int_new: (a: number) => number;
  +int_new_negative: (a: number) => number;
  +int_new_i32: (a: number) => number;
  +int_is_positive: (a: number) => number;
  +int_as_positive: (a: number) => number;
  +int_as_negative: (a: number) => number;
  +int_as_i32: (a: number, b: number) => void;
  +__wbg_bigint_free: (a: number) => void;
  +bigint_to_bytes: (a: number, b: number) => void;
  +bigint_from_bytes: (a: number, b: number) => number;
  +bigint_as_u64: (a: number) => number;
  +bigint_from_str: (a: number, b: number) => number;
  +bigint_to_str: (a: number, b: number) => void;
  +make_daedalus_bootstrap_witness: (a: number, b: number, c: number) => number;
  +make_icarus_bootstrap_witness: (a: number, b: number, c: number) => number;
  +make_vkey_witness: (a: number, b: number) => number;
  +hash_auxiliary_data: (a: number) => number;
  +hash_transaction: (a: number) => number;
  +hash_plutus_data: (a: number) => number;
  +hash_script_data: (a: number, b: number, c: number) => number;
  +get_implicit_input: (a: number, b: number, c: number) => number;
  +get_deposit: (a: number, b: number, c: number) => number;
  +min_ada_required: (a: number, b: number) => number;
  +encode_json_str_to_native_script: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
  ) => number;
  +encrypt_with_password: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
    g: number,
    h: number,
    i: number,
  ) => void;
  +decrypt_with_password: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
  ) => void;
  +__wbg_linearfee_free: (a: number) => void;
  +linearfee_constant: (a: number) => number;
  +linearfee_coefficient: (a: number) => number;
  +linearfee_new: (a: number, b: number) => number;
  +min_fee: (a: number, b: number) => number;
  +__wbg_transactionbuilder_free: (a: number) => void;
  +transactionbuilder_add_key_input: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +transactionbuilder_add_script_input: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +transactionbuilder_add_bootstrap_input: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +transactionbuilder_add_input: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +transactionbuilder_fee_for_input: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => number;
  +transactionbuilder_add_output: (a: number, b: number) => void;
  +transactionbuilder_fee_for_output: (a: number, b: number) => number;
  +transactionbuilder_set_fee: (a: number, b: number) => void;
  +transactionbuilder_set_ttl: (a: number, b: number) => void;
  +transactionbuilder_set_validity_start_interval: (
    a: number,
    b: number,
  ) => void;
  +transactionbuilder_set_certs: (a: number, b: number) => void;
  +transactionbuilder_set_withdrawals: (a: number, b: number) => void;
  +transactionbuilder_set_auxiliary_data: (a: number, b: number) => void;
  +transactionbuilder_set_prefer_pure_change: (a: number, b: number) => void;
  +transactionbuilder_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
  ) => number;
  +transactionbuilder_get_explicit_input: (a: number) => number;
  +transactionbuilder_get_implicit_input: (a: number) => number;
  +transactionbuilder_get_explicit_output: (a: number) => number;
  +transactionbuilder_get_deposit: (a: number) => number;
  +transactionbuilder_get_fee_if_set: (a: number) => number;
  +transactionbuilder_add_change_if_needed: (a: number, b: number) => number;
  +transactionbuilder_full_size: (a: number) => number;
  +transactionbuilder_output_sizes: (a: number, b: number) => void;
  +transactionbuilder_build: (a: number) => number;
  +transactionbuilder_min_fee: (a: number) => number;
  +__wbg_bip32privatekey_free: (a: number) => void;
  +bip32privatekey_derive: (a: number, b: number) => number;
  +bip32privatekey_from_128_xprv: (a: number, b: number) => number;
  +bip32privatekey_to_128_xprv: (a: number, b: number) => void;
  +bip32privatekey_generate_ed25519_bip32: () => number;
  +bip32privatekey_to_raw_key: (a: number) => number;
  +bip32privatekey_to_public: (a: number) => number;
  +bip32privatekey_from_bytes: (a: number, b: number) => number;
  +bip32privatekey_as_bytes: (a: number, b: number) => void;
  +bip32privatekey_from_bech32: (a: number, b: number) => number;
  +bip32privatekey_to_bech32: (a: number, b: number) => void;
  +bip32privatekey_from_bip39_entropy: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => number;
  +bip32privatekey_chaincode: (a: number, b: number) => void;
  +__wbg_bip32publickey_free: (a: number) => void;
  +bip32publickey_derive: (a: number, b: number) => number;
  +bip32publickey_to_raw_key: (a: number) => number;
  +bip32publickey_from_bytes: (a: number, b: number) => number;
  +bip32publickey_as_bytes: (a: number, b: number) => void;
  +bip32publickey_from_bech32: (a: number, b: number) => number;
  +bip32publickey_to_bech32: (a: number, b: number) => void;
  +bip32publickey_chaincode: (a: number, b: number) => void;
  +__wbg_privatekey_free: (a: number) => void;
  +privatekey_to_public: (a: number) => number;
  +privatekey_generate_ed25519: () => number;
  +privatekey_generate_ed25519extended: () => number;
  +privatekey_from_bech32: (a: number, b: number) => number;
  +privatekey_to_bech32: (a: number, b: number) => void;
  +privatekey_as_bytes: (a: number, b: number) => void;
  +privatekey_from_extended_bytes: (a: number, b: number) => number;
  +privatekey_from_normal_bytes: (a: number, b: number) => number;
  +privatekey_sign: (a: number, b: number, c: number) => number;
  +__wbg_publickey_free: (a: number) => void;
  +publickey_from_bech32: (a: number, b: number) => number;
  +publickey_to_bech32: (a: number, b: number) => void;
  +publickey_as_bytes: (a: number, b: number) => void;
  +publickey_from_bytes: (a: number, b: number) => number;
  +publickey_verify: (a: number, b: number, c: number, d: number) => number;
  +publickey_hash: (a: number) => number;
  +__wbg_vkey_free: (a: number) => void;
  +vkey_to_bytes: (a: number, b: number) => void;
  +vkey_from_bytes: (a: number, b: number) => number;
  +vkey_new: (a: number) => number;
  +vkey_public_key: (a: number) => number;
  +__wbg_vkeys_free: (a: number) => void;
  +vkeys_new: () => number;
  +vkeys_len: (a: number) => number;
  +vkeys_get: (a: number, b: number) => number;
  +vkeys_add: (a: number, b: number) => void;
  +__wbg_vkeywitness_free: (a: number) => void;
  +vkeywitness_to_bytes: (a: number, b: number) => void;
  +vkeywitness_from_bytes: (a: number, b: number) => number;
  +vkeywitness_new: (a: number, b: number) => number;
  +vkeywitness_vkey: (a: number) => number;
  +vkeywitness_signature: (a: number) => number;
  +__wbg_vkeywitnesses_free: (a: number) => void;
  +vkeywitnesses_new: () => number;
  +vkeywitnesses_len: (a: number) => number;
  +vkeywitnesses_get: (a: number, b: number) => number;
  +vkeywitnesses_add: (a: number, b: number) => void;
  +__wbg_bootstrapwitness_free: (a: number) => void;
  +bootstrapwitness_to_bytes: (a: number, b: number) => void;
  +bootstrapwitness_from_bytes: (a: number, b: number) => number;
  +bootstrapwitness_vkey: (a: number) => number;
  +bootstrapwitness_signature: (a: number) => number;
  +bootstrapwitness_chain_code: (a: number, b: number) => void;
  +bootstrapwitness_attributes: (a: number, b: number) => void;
  +bootstrapwitness_new: (
    a: number,
    b: number,
    c: number,
    d: number,
    e: number,
    f: number,
  ) => number;
  +__wbg_bootstrapwitnesses_free: (a: number) => void;
  +bootstrapwitnesses_new: () => number;
  +bootstrapwitnesses_len: (a: number) => number;
  +bootstrapwitnesses_get: (a: number, b: number) => number;
  +bootstrapwitnesses_add: (a: number, b: number) => void;
  +__wbg_publickeys_free: (a: number) => void;
  +publickeys_new: () => number;
  +publickeys_size: (a: number) => number;
  +publickeys_get: (a: number, b: number) => number;
  +publickeys_add: (a: number, b: number) => void;
  +__wbg_ed25519signature_free: (a: number) => void;
  +ed25519signature_to_bytes: (a: number, b: number) => void;
  +ed25519signature_to_bech32: (a: number, b: number) => void;
  +ed25519signature_to_hex: (a: number, b: number) => void;
  +ed25519signature_from_bech32: (a: number, b: number) => number;
  +ed25519signature_from_hex: (a: number, b: number) => number;
  +ed25519signature_from_bytes: (a: number, b: number) => number;
  +__wbg_legacydaedalusprivatekey_free: (a: number) => void;
  +legacydaedalusprivatekey_from_bytes: (a: number, b: number) => number;
  +legacydaedalusprivatekey_as_bytes: (a: number, b: number) => void;
  +legacydaedalusprivatekey_chaincode: (a: number, b: number) => void;
  +__wbg_ed25519keyhash_free: (a: number) => void;
  +ed25519keyhash_to_bytes: (a: number, b: number) => void;
  +ed25519keyhash_to_bech32: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +ed25519keyhash_from_bech32: (a: number, b: number) => number;
  +ed25519keyhash_from_bytes: (a: number, b: number) => number;
  +__wbg_scripthash_free: (a: number) => void;
  +scripthash_to_bytes: (a: number, b: number) => void;
  +scripthash_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +scripthash_from_bech32: (a: number, b: number) => number;
  +scripthash_from_bytes: (a: number, b: number) => number;
  +__wbg_transactionhash_free: (a: number) => void;
  +transactionhash_to_bytes: (a: number, b: number) => void;
  +transactionhash_to_bech32: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +transactionhash_from_bech32: (a: number, b: number) => number;
  +transactionhash_from_bytes: (a: number, b: number) => number;
  +__wbg_genesisdelegatehash_free: (a: number) => void;
  +genesisdelegatehash_to_bytes: (a: number, b: number) => void;
  +genesisdelegatehash_to_bech32: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +genesisdelegatehash_from_bech32: (a: number, b: number) => number;
  +genesisdelegatehash_from_bytes: (a: number, b: number) => number;
  +__wbg_genesishash_free: (a: number) => void;
  +genesishash_to_bytes: (a: number, b: number) => void;
  +genesishash_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +genesishash_from_bech32: (a: number, b: number) => number;
  +genesishash_from_bytes: (a: number, b: number) => number;
  +__wbg_auxiliarydatahash_free: (a: number) => void;
  +auxiliarydatahash_to_bytes: (a: number, b: number) => void;
  +auxiliarydatahash_to_bech32: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +auxiliarydatahash_from_bech32: (a: number, b: number) => number;
  +auxiliarydatahash_from_bytes: (a: number, b: number) => number;
  +__wbg_poolmetadatahash_free: (a: number) => void;
  +poolmetadatahash_to_bytes: (a: number, b: number) => void;
  +poolmetadatahash_to_bech32: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +poolmetadatahash_from_bech32: (a: number, b: number) => number;
  +poolmetadatahash_from_bytes: (a: number, b: number) => number;
  +__wbg_vrfkeyhash_free: (a: number) => void;
  +vrfkeyhash_to_bytes: (a: number, b: number) => void;
  +vrfkeyhash_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +vrfkeyhash_from_bech32: (a: number, b: number) => number;
  +vrfkeyhash_from_bytes: (a: number, b: number) => number;
  +__wbg_blockhash_free: (a: number) => void;
  +blockhash_to_bytes: (a: number, b: number) => void;
  +blockhash_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +blockhash_from_bech32: (a: number, b: number) => number;
  +blockhash_from_bytes: (a: number, b: number) => number;
  +__wbg_datahash_free: (a: number) => void;
  +datahash_to_bytes: (a: number, b: number) => void;
  +datahash_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +datahash_from_bech32: (a: number, b: number) => number;
  +datahash_from_bytes: (a: number, b: number) => number;
  +__wbg_scriptdatahash_free: (a: number) => void;
  +scriptdatahash_to_bytes: (a: number, b: number) => void;
  +scriptdatahash_to_bech32: (
    a: number,
    b: number,
    c: number,
    d: number,
  ) => void;
  +scriptdatahash_from_bech32: (a: number, b: number) => number;
  +scriptdatahash_from_bytes: (a: number, b: number) => number;
  +__wbg_vrfvkey_free: (a: number) => void;
  +vrfvkey_to_bytes: (a: number, b: number) => void;
  +vrfvkey_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +vrfvkey_from_bech32: (a: number, b: number) => number;
  +vrfvkey_from_bytes: (a: number, b: number) => number;
  +__wbg_kesvkey_free: (a: number) => void;
  +kesvkey_to_bytes: (a: number, b: number) => void;
  +kesvkey_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +kesvkey_from_bech32: (a: number, b: number) => number;
  +kesvkey_from_bytes: (a: number, b: number) => number;
  +__wbg_kessignature_free: (a: number) => void;
  +kessignature_to_bytes: (a: number, b: number) => void;
  +kessignature_from_bytes: (a: number, b: number) => number;
  +__wbg_nonce_free: (a: number) => void;
  +nonce_to_bytes: (a: number, b: number) => void;
  +nonce_from_bytes: (a: number, b: number) => number;
  +nonce_new_identity: () => number;
  +nonce_new_from_hash: (a: number, b: number) => number;
  +nonce_get_hash: (a: number, b: number) => void;
  +__wbg_vrfcert_free: (a: number) => void;
  +vrfcert_to_bytes: (a: number, b: number) => void;
  +vrfcert_from_bytes: (a: number, b: number) => number;
  +vrfcert_output: (a: number, b: number) => void;
  +vrfcert_proof: (a: number, b: number) => void;
  +vrfcert_new: (a: number, b: number, c: number, d: number) => number;
  +__wbg_networkinfo_free: (a: number) => void;
  +networkinfo_new: (a: number, b: number) => number;
  +networkinfo_network_id: (a: number) => number;
  +networkinfo_protocol_magic: (a: number) => number;
  +networkinfo_testnet: () => number;
  +networkinfo_mainnet: () => number;
  +__wbg_stakecredential_free: (a: number) => void;
  +stakecredential_from_keyhash: (a: number) => number;
  +stakecredential_from_scripthash: (a: number) => number;
  +stakecredential_to_keyhash: (a: number) => number;
  +stakecredential_to_scripthash: (a: number) => number;
  +stakecredential_kind: (a: number) => number;
  +stakecredential_to_bytes: (a: number, b: number) => void;
  +stakecredential_from_bytes: (a: number, b: number) => number;
  +__wbg_byronaddress_free: (a: number) => void;
  +byronaddress_to_base58: (a: number, b: number) => void;
  +byronaddress_to_bytes: (a: number, b: number) => void;
  +byronaddress_from_bytes: (a: number, b: number) => number;
  +byronaddress_byron_protocol_magic: (a: number) => number;
  +byronaddress_attributes: (a: number, b: number) => void;
  +byronaddress_network_id: (a: number) => number;
  +byronaddress_from_base58: (a: number, b: number) => number;
  +byronaddress_icarus_from_key: (a: number, b: number) => number;
  +byronaddress_is_valid: (a: number, b: number) => number;
  +byronaddress_to_address: (a: number) => number;
  +byronaddress_from_address: (a: number) => number;
  +__wbg_address_free: (a: number) => void;
  +address_from_bytes: (a: number, b: number) => number;
  +address_to_bytes: (a: number, b: number) => void;
  +address_to_bech32: (a: number, b: number, c: number, d: number) => void;
  +address_from_bech32: (a: number, b: number) => number;
  +address_network_id: (a: number) => number;
  +__wbg_baseaddress_free: (a: number) => void;
  +baseaddress_new: (a: number, b: number, c: number) => number;
  +baseaddress_payment_cred: (a: number) => number;
  +baseaddress_stake_cred: (a: number) => number;
  +baseaddress_to_address: (a: number) => number;
  +baseaddress_from_address: (a: number) => number;
  +__wbg_enterpriseaddress_free: (a: number) => void;
  +enterpriseaddress_new: (a: number, b: number) => number;
  +enterpriseaddress_payment_cred: (a: number) => number;
  +enterpriseaddress_to_address: (a: number) => number;
  +enterpriseaddress_from_address: (a: number) => number;
  +__wbg_rewardaddress_free: (a: number) => void;
  +rewardaddress_new: (a: number, b: number) => number;
  +rewardaddress_payment_cred: (a: number) => number;
  +rewardaddress_to_address: (a: number) => number;
  +rewardaddress_from_address: (a: number) => number;
  +__wbg_pointer_free: (a: number) => void;
  +pointer_new: (a: number, b: number, c: number) => number;
  +pointer_slot: (a: number) => number;
  +pointer_tx_index: (a: number) => number;
  +pointer_cert_index: (a: number) => number;
  +__wbg_pointeraddress_free: (a: number) => void;
  +pointeraddress_new: (a: number, b: number, c: number) => number;
  +pointeraddress_payment_cred: (a: number) => number;
  +pointeraddress_stake_pointer: (a: number) => number;
  +pointeraddress_to_address: (a: number) => number;
  +pointeraddress_from_address: (a: number) => number;
  +__wbg_plutusscript_free: (a: number) => void;
  +plutusscript_to_bytes: (a: number, b: number) => void;
  +plutusscript_from_bytes: (a: number, b: number) => number;
  +plutusscript_new: (a: number, b: number) => number;
  +plutusscript_bytes: (a: number, b: number) => void;
  +__wbg_plutusscripts_free: (a: number) => void;
  +plutusscripts_to_bytes: (a: number, b: number) => void;
  +plutusscripts_from_bytes: (a: number, b: number) => number;
  +plutusscripts_new: () => number;
  +plutusscripts_len: (a: number) => number;
  +plutusscripts_get: (a: number, b: number) => number;
  +plutusscripts_add: (a: number, b: number) => void;
  +__wbg_constrplutusdata_free: (a: number) => void;
  +constrplutusdata_to_bytes: (a: number, b: number) => void;
  +constrplutusdata_from_bytes: (a: number, b: number) => number;
  +constrplutusdata_tag: (a: number) => number;
  +constrplutusdata_data: (a: number) => number;
  +constrplutusdata_new: (a: number, b: number) => number;
  +__wbg_costmodel_free: (a: number) => void;
  +costmodel_to_bytes: (a: number, b: number) => void;
  +costmodel_from_bytes: (a: number, b: number) => number;
  +costmodel_new: () => number;
  +costmodel_set: (a: number, b: number, c: number) => number;
  +costmodel_get: (a: number, b: number) => number;
  +__wbg_costmdls_free: (a: number) => void;
  +costmdls_to_bytes: (a: number, b: number) => void;
  +costmdls_from_bytes: (a: number, b: number) => number;
  +costmdls_new: () => number;
  +costmdls_len: (a: number) => number;
  +costmdls_insert: (a: number, b: number, c: number) => number;
  +costmdls_get: (a: number, b: number) => number;
  +costmdls_keys: (a: number) => number;
  +__wbg_exunitprices_free: (a: number) => void;
  +exunitprices_to_bytes: (a: number, b: number) => void;
  +exunitprices_from_bytes: (a: number, b: number) => number;
  +exunitprices_mem_price: (a: number) => number;
  +exunitprices_step_price: (a: number) => number;
  +exunitprices_new: (a: number, b: number) => number;
  +__wbg_exunits_free: (a: number) => void;
  +exunits_to_bytes: (a: number, b: number) => void;
  +exunits_from_bytes: (a: number, b: number) => number;
  +exunits_mem: (a: number) => number;
  +exunits_steps: (a: number) => number;
  +exunits_new: (a: number, b: number) => number;
  +__wbg_language_free: (a: number) => void;
  +language_to_bytes: (a: number, b: number) => void;
  +language_from_bytes: (a: number, b: number) => number;
  +language_new_plutus_v1: () => number;
  +language_kind: (a: number) => number;
  +__wbg_languages_free: (a: number) => void;
  +languages_new: () => number;
  +languages_len: (a: number) => number;
  +languages_get: (a: number, b: number) => number;
  +languages_add: (a: number, b: number) => void;
  +__wbg_plutusmap_free: (a: number) => void;
  +plutusmap_to_bytes: (a: number, b: number) => void;
  +plutusmap_from_bytes: (a: number, b: number) => number;
  +plutusmap_new: () => number;
  +plutusmap_len: (a: number) => number;
  +plutusmap_insert: (a: number, b: number, c: number) => number;
  +plutusmap_get: (a: number, b: number) => number;
  +plutusmap_keys: (a: number) => number;
  +__wbg_plutusdata_free: (a: number) => void;
  +plutusdata_to_bytes: (a: number, b: number) => void;
  +plutusdata_from_bytes: (a: number, b: number) => number;
  +plutusdata_new_constr_plutus_data: (a: number) => number;
  +plutusdata_new_map: (a: number) => number;
  +plutusdata_new_list: (a: number) => number;
  +plutusdata_new_integer: (a: number) => number;
  +plutusdata_new_bytes: (a: number, b: number) => number;
  +plutusdata_kind: (a: number) => number;
  +plutusdata_as_constr_plutus_data: (a: number) => number;
  +plutusdata_as_map: (a: number) => number;
  +plutusdata_as_list: (a: number) => number;
  +plutusdata_as_integer: (a: number) => number;
  +plutusdata_as_bytes: (a: number, b: number) => void;
  +__wbg_plutuslist_free: (a: number) => void;
  +plutuslist_to_bytes: (a: number, b: number) => void;
  +plutuslist_from_bytes: (a: number, b: number) => number;
  +plutuslist_new: () => number;
  +plutuslist_len: (a: number) => number;
  +plutuslist_get: (a: number, b: number) => number;
  +plutuslist_add: (a: number, b: number) => void;
  +__wbg_redeemer_free: (a: number) => void;
  +redeemer_to_bytes: (a: number, b: number) => void;
  +redeemer_from_bytes: (a: number, b: number) => number;
  +redeemer_tag: (a: number) => number;
  +redeemer_index: (a: number) => number;
  +redeemer_data: (a: number) => number;
  +redeemer_ex_units: (a: number) => number;
  +redeemer_new: (a: number, b: number, c: number, d: number) => number;
  +__wbg_redeemertag_free: (a: number) => void;
  +redeemertag_to_bytes: (a: number, b: number) => void;
  +redeemertag_from_bytes: (a: number, b: number) => number;
  +redeemertag_new_spend: () => number;
  +redeemertag_new_mint: () => number;
  +redeemertag_new_cert: () => number;
  +redeemertag_new_reward: () => number;
  +redeemertag_kind: (a: number) => number;
  +__wbg_redeemers_free: (a: number) => void;
  +redeemers_to_bytes: (a: number, b: number) => void;
  +redeemers_from_bytes: (a: number, b: number) => number;
  +redeemers_new: () => number;
  +redeemers_len: (a: number) => number;
  +redeemers_get: (a: number, b: number) => number;
  +redeemers_add: (a: number, b: number) => void;
  +__wbg_strings_free: (a: number) => void;
  +strings_new: () => number;
  +strings_len: (a: number) => number;
  +strings_get: (a: number, b: number, c: number) => void;
  +strings_add: (a: number, b: number, c: number) => void;
  +__wbindgen_malloc: (a: number) => number;
  +__wbindgen_realloc: (a: number, b: number, c: number) => number;
  +__wbindgen_add_to_stack_pointer: (a: number) => number;
  +__wbindgen_free: (a: number, b: number) => void;
}
/**
 * If `module_or_path` is {RequestInfo} or {URL}, makes a request and
 * for everything else, calls `WebAssembly.instantiate` directly.
 * @param {InitInput | Promise<InitInput>} module_or_path
 * @returns {Promise<InitOutput>}
 */
declare export default function init(
  module_or_path?: InitInput | Promise<InitInput>,
): Promise<InitOutput>;
